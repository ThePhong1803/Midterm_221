
Midterm_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002600  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800270c  0800270c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800272c  0800272c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800272c  0800272c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800272c  0800272c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800272c  0800272c  0001272c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002730  08002730  00012730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000001c  08002750  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002750  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008edf  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a06  00000000  00000000  00028f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002a930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002b3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aa4  00000000  00000000  0002bd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3db  00000000  00000000  000427cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082108  00000000  00000000  0004dba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfcaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a4  00000000  00000000  000cfd04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026f4 	.word	0x080026f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080026f4 	.word	0x080026f4

0800014c <initButton>:
//user definition input port and input pin
#define INPUT_PORT GPIOA
uint16_t buttonPin[NO_OF_BUTTONS] = {0x2000, 0x4000, 0x8000};


void initButton(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	//clear all buffers, counters and flags
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e020      	b.n	800019a <initButton+0x4e>
		debounceButtonBuffer1[i] 		= BUTTON_IS_RELEASED;	//buffer level 1
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4a14      	ldr	r2, [pc, #80]	; (80001ac <initButton+0x60>)
 800015c:	2101      	movs	r1, #1
 800015e:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] 		= BUTTON_IS_RELEASED;	//buffer level 2
 8000160:	79fb      	ldrb	r3, [r7, #7]
 8000162:	4a13      	ldr	r2, [pc, #76]	; (80001b0 <initButton+0x64>)
 8000164:	2101      	movs	r1, #1
 8000166:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer3[i] 		= BUTTON_IS_RELEASED;	//buffer level 3
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	4a12      	ldr	r2, [pc, #72]	; (80001b4 <initButton+0x68>)
 800016c:	2101      	movs	r1, #1
 800016e:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer4[i] 		= BUTTON_IS_RELEASED;	//buffer level 4
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	4a11      	ldr	r2, [pc, #68]	; (80001b8 <initButton+0x6c>)
 8000174:	2101      	movs	r1, #1
 8000176:	54d1      	strb	r1, [r2, r3]
		buttonFlags[i] 					= BUTTON_FLAG_CLEAR;	//button pressed flag
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4a10      	ldr	r2, [pc, #64]	; (80001bc <initButton+0x70>)
 800017c:	2100      	movs	r1, #0
 800017e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		flagForButtonPress1s[i] 		= BUTTON_FLAG_CLEAR;	//button hold flag
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	4a0e      	ldr	r2, [pc, #56]	; (80001c0 <initButton+0x74>)
 8000186:	2100      	movs	r1, #0
 8000188:	54d1      	strb	r1, [r2, r3]
//		flagForButtonDoublePressed[i] 	= BUTTON_FLAG_CLEAR;	//button double pressed flag
//		TimeOutForKeyDoublePress[i]     = DOUBLE_PRESS_TIMEOUT;	//time interval double pressed
//		TimeOutForKeyPress[i]           = KEY_HOLD_TIMEOUT;
//		buttonWaitDoublePress[i]        = 0;					//button state wait for double pressed detection
		counterForButtonPress1s[i] 		= 0;					//counter for button hold detection
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	4a0d      	ldr	r2, [pc, #52]	; (80001c4 <initButton+0x78>)
 800018e:	2100      	movs	r1, #0
 8000190:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	3301      	adds	r3, #1
 8000198:	71fb      	strb	r3, [r7, #7]
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	2b02      	cmp	r3, #2
 800019e:	d9db      	bls.n	8000158 <initButton+0xc>
	}
}
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	20000038 	.word	0x20000038
 80001b0:	2000003c 	.word	0x2000003c
 80001b4:	20000040 	.word	0x20000040
 80001b8:	20000044 	.word	0x20000044
 80001bc:	2000008c 	.word	0x2000008c
 80001c0:	20000048 	.word	0x20000048
 80001c4:	2000004c 	.word	0x2000004c

080001c8 <button_reading>:

void button_reading (void) {
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	//checking for button pressed, hold more than 1 second and double pressed
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
 80001d2:	e071      	b.n	80002b8 <button_reading+0xf0>
		//propagate buffer stage 2 to stage 3
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 80001d4:	79fa      	ldrb	r2, [r7, #7]
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	493b      	ldr	r1, [pc, #236]	; (80002c8 <button_reading+0x100>)
 80001da:	5c89      	ldrb	r1, [r1, r2]
 80001dc:	4a3b      	ldr	r2, [pc, #236]	; (80002cc <button_reading+0x104>)
 80001de:	54d1      	strb	r1, [r2, r3]

		//propagate buffer stage 1 to stage 2
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80001e0:	79fa      	ldrb	r2, [r7, #7]
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	493a      	ldr	r1, [pc, #232]	; (80002d0 <button_reading+0x108>)
 80001e6:	5c89      	ldrb	r1, [r1, r2]
 80001e8:	4a37      	ldr	r2, [pc, #220]	; (80002c8 <button_reading+0x100>)
 80001ea:	54d1      	strb	r1, [r2, r3]

		//update the lasted button state in buffer 1
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(INPUT_PORT, buttonPin[i]);
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	4a39      	ldr	r2, [pc, #228]	; (80002d4 <button_reading+0x10c>)
 80001f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001f4:	79fc      	ldrb	r4, [r7, #7]
 80001f6:	4619      	mov	r1, r3
 80001f8:	4837      	ldr	r0, [pc, #220]	; (80002d8 <button_reading+0x110>)
 80001fa:	f001 fa3b 	bl	8001674 <HAL_GPIO_ReadPin>
 80001fe:	4603      	mov	r3, r0
 8000200:	461a      	mov	r2, r3
 8000202:	4b33      	ldr	r3, [pc, #204]	; (80002d0 <button_reading+0x108>)
 8000204:	551a      	strb	r2, [r3, r4]

		//if the button state hold straight for around 40ms
		if((debounceButtonBuffer2[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer3[i]))
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	4a2f      	ldr	r2, [pc, #188]	; (80002c8 <button_reading+0x100>)
 800020a:	5cd2      	ldrb	r2, [r2, r3]
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4930      	ldr	r1, [pc, #192]	; (80002d0 <button_reading+0x108>)
 8000210:	5ccb      	ldrb	r3, [r1, r3]
 8000212:	429a      	cmp	r2, r3
 8000214:	d14d      	bne.n	80002b2 <button_reading+0xea>
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	4a2b      	ldr	r2, [pc, #172]	; (80002c8 <button_reading+0x100>)
 800021a:	5cd2      	ldrb	r2, [r2, r3]
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	492b      	ldr	r1, [pc, #172]	; (80002cc <button_reading+0x104>)
 8000220:	5ccb      	ldrb	r3, [r1, r3]
 8000222:	429a      	cmp	r2, r3
 8000224:	d145      	bne.n	80002b2 <button_reading+0xea>
		{
			//check for update buffer level 4
			if(debounceButtonBuffer3[i] != debounceButtonBuffer4[i])
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	4a28      	ldr	r2, [pc, #160]	; (80002cc <button_reading+0x104>)
 800022a:	5cd2      	ldrb	r2, [r2, r3]
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	492b      	ldr	r1, [pc, #172]	; (80002dc <button_reading+0x114>)
 8000230:	5ccb      	ldrb	r3, [r1, r3]
 8000232:	429a      	cmp	r2, r3
 8000234:	d020      	beq.n	8000278 <button_reading+0xb0>
						//clear counter for hold event to prevent unexpected hold button
						counterForButtonPress1s[i] = 0; //counting from 0 after double pressed for button hold event
					}
				}
#endif
				debounceButtonBuffer4[i] = debounceButtonBuffer3[i];
 8000236:	79fa      	ldrb	r2, [r7, #7]
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	4924      	ldr	r1, [pc, #144]	; (80002cc <button_reading+0x104>)
 800023c:	5c89      	ldrb	r1, [r1, r2]
 800023e:	4a27      	ldr	r2, [pc, #156]	; (80002dc <button_reading+0x114>)
 8000240:	54d1      	strb	r1, [r2, r3]
				if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	4a25      	ldr	r2, [pc, #148]	; (80002dc <button_reading+0x114>)
 8000246:	5cd3      	ldrb	r3, [r2, r3]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d10b      	bne.n	8000264 <button_reading+0x9c>
					/* Button trigger on */
					//set button press flags
					buttonFlags[i] = BUTTON_FLAG_SET;
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	4a24      	ldr	r2, [pc, #144]	; (80002e0 <button_reading+0x118>)
 8000250:	2101      	movs	r1, #1
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					//ste the first hold time out for button hold flags
					counterForButtonPress1s[i] = BUTTON_HOLD_TIMEOUT;
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	4a22      	ldr	r2, [pc, #136]	; (80002e4 <button_reading+0x11c>)
 800025a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800025e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000262:	e026      	b.n	80002b2 <button_reading+0xea>

				}
				else {
					//button buffer level 4 update state to button release
					//clear the counter and button hold flags
					counterForButtonPress1s[i] = 0;
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	4a1f      	ldr	r2, [pc, #124]	; (80002e4 <button_reading+0x11c>)
 8000268:	2100      	movs	r1, #0
 800026a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPress1s[i] = BUTTON_FLAG_CLEAR;
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	4a1d      	ldr	r2, [pc, #116]	; (80002e8 <button_reading+0x120>)
 8000272:	2100      	movs	r1, #0
 8000274:	54d1      	strb	r1, [r2, r3]
 8000276:	e01c      	b.n	80002b2 <button_reading+0xea>
				}
			} else if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	4a18      	ldr	r2, [pc, #96]	; (80002dc <button_reading+0x114>)
 800027c:	5cd3      	ldrb	r3, [r2, r3]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d117      	bne.n	80002b2 <button_reading+0xea>
				//buffer level 3 == buffer level 4 == BUTTON PRESSED

				//if button is still hold, increase counter
				counterForButtonPress1s[i]--;
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	4a17      	ldr	r2, [pc, #92]	; (80002e4 <button_reading+0x11c>)
 8000286:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800028a:	3a01      	subs	r2, #1
 800028c:	b291      	uxth	r1, r2
 800028e:	4a15      	ldr	r2, [pc, #84]	; (80002e4 <button_reading+0x11c>)
 8000290:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				//if counter reach hold threshold, set hold 1s flag and continue counting
				//the counter only reset to 0 when the button is release;
				if (counterForButtonPress1s[i] == 0){
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	4a13      	ldr	r2, [pc, #76]	; (80002e4 <button_reading+0x11c>)
 8000298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d108      	bne.n	80002b2 <button_reading+0xea>
					flagForButtonPress1s[i] = BUTTON_FLAG_SET;
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <button_reading+0x120>)
 80002a4:	2101      	movs	r1, #1
 80002a6:	54d1      	strb	r1, [r2, r3]
					counterForButtonPress1s[i] = AUTO_REPEAT_RATE;
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <button_reading+0x11c>)
 80002ac:	2164      	movs	r1, #100	; 0x64
 80002ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	3301      	adds	r3, #1
 80002b6:	71fb      	strb	r3, [r7, #7]
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	2b02      	cmp	r3, #2
 80002bc:	d98a      	bls.n	80001d4 <button_reading+0xc>
				//between button pressed and button hold, so the button hold will the the failed trigger button pressed
			}
		}
#endif
	}
}
 80002be:	bf00      	nop
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd90      	pop	{r4, r7, pc}
 80002c8:	2000003c 	.word	0x2000003c
 80002cc:	20000040 	.word	0x20000040
 80002d0:	20000038 	.word	0x20000038
 80002d4:	20000000 	.word	0x20000000
 80002d8:	40010800 	.word	0x40010800
 80002dc:	20000044 	.word	0x20000044
 80002e0:	2000008c 	.word	0x2000008c
 80002e4:	2000004c 	.word	0x2000004c
 80002e8:	20000048 	.word	0x20000048

080002ec <isButtonPressed>:

unsigned char isButtonPressed(unsigned char index){
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	2b02      	cmp	r3, #2
 80002fa:	d901      	bls.n	8000300 <isButtonPressed+0x14>
 80002fc:	2300      	movs	r3, #0
 80002fe:	e00d      	b.n	800031c <isButtonPressed+0x30>
		//clear button flags and return
		buttonFlags[index] = BUTTON_FLAG_CLEAR;
		return 1;
	} else return 0;
#else
	if(buttonFlags[index] == BUTTON_FLAG_SET){
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	4a09      	ldr	r2, [pc, #36]	; (8000328 <isButtonPressed+0x3c>)
 8000304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d106      	bne.n	800031a <isButtonPressed+0x2e>
		//clear button flags and return
		buttonFlags[index] = BUTTON_FLAG_CLEAR;
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	4a06      	ldr	r2, [pc, #24]	; (8000328 <isButtonPressed+0x3c>)
 8000310:	2100      	movs	r1, #0
 8000312:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000316:	2301      	movs	r3, #1
 8000318:	e000      	b.n	800031c <isButtonPressed+0x30>
	} else return 0;
 800031a:	2300      	movs	r3, #0
#endif
}
 800031c:	4618      	mov	r0, r3
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	2000008c 	.word	0x2000008c

0800032c <isButtonPressed3s>:

unsigned char isButtonPressed3s(unsigned char index){
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	2b02      	cmp	r3, #2
 800033a:	d901      	bls.n	8000340 <isButtonPressed3s+0x14>
 800033c:	2300      	movs	r3, #0
 800033e:	e00b      	b.n	8000358 <isButtonPressed3s+0x2c>
	if(flagForButtonPress1s[index] == BUTTON_FLAG_SET){
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	4a08      	ldr	r2, [pc, #32]	; (8000364 <isButtonPressed3s+0x38>)
 8000344:	5cd3      	ldrb	r3, [r2, r3]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d105      	bne.n	8000356 <isButtonPressed3s+0x2a>
		//clear button hold more than 3s flags and return
		flagForButtonPress1s[index] = BUTTON_FLAG_CLEAR;
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	4a05      	ldr	r2, [pc, #20]	; (8000364 <isButtonPressed3s+0x38>)
 800034e:	2100      	movs	r1, #0
 8000350:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000352:	2301      	movs	r3, #1
 8000354:	e000      	b.n	8000358 <isButtonPressed3s+0x2c>
	} else return 0;
 8000356:	2300      	movs	r3, #0
}
 8000358:	4618      	mov	r0, r3
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20000048 	.word	0x20000048

08000368 <fsm_simple_buttons_run>:
 */


#include "fsm.h"

void fsm_simple_buttons_run(){
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	//TODO
	switch (status){
 800036c:	4ba3      	ldr	r3, [pc, #652]	; (80005fc <fsm_simple_buttons_run+0x294>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	3b01      	subs	r3, #1
 8000372:	2b0d      	cmp	r3, #13
 8000374:	f200 8294 	bhi.w	80008a0 <fsm_simple_buttons_run+0x538>
 8000378:	a201      	add	r2, pc, #4	; (adr r2, 8000380 <fsm_simple_buttons_run+0x18>)
 800037a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800037e:	bf00      	nop
 8000380:	080003b9 	.word	0x080003b9
 8000384:	0800045b 	.word	0x0800045b
 8000388:	0800051b 	.word	0x0800051b
 800038c:	08000609 	.word	0x08000609
 8000390:	080008a1 	.word	0x080008a1
 8000394:	080008a1 	.word	0x080008a1
 8000398:	080008a1 	.word	0x080008a1
 800039c:	080008a1 	.word	0x080008a1
 80003a0:	080008a1 	.word	0x080008a1
 80003a4:	080008a1 	.word	0x080008a1
 80003a8:	080008a1 	.word	0x080008a1
 80003ac:	080008a1 	.word	0x080008a1
 80003b0:	080006e5 	.word	0x080006e5
 80003b4:	080007c7 	.word	0x080007c7
		case IDLE:
			//check the counter, if zero mean that we system is stop counting
			//and wait for button event
			if(counter != 0) {
 80003b8:	4b91      	ldr	r3, [pc, #580]	; (8000600 <fsm_simple_buttons_run+0x298>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d005      	beq.n	80003cc <fsm_simple_buttons_run+0x64>
				//go to count down state with timer1 count down 1 second
				status = COUNT_DOWN;
 80003c0:	4b8e      	ldr	r3, [pc, #568]	; (80005fc <fsm_simple_buttons_run+0x294>)
 80003c2:	2202      	movs	r2, #2
 80003c4:	601a      	str	r2, [r3, #0]
				setTimer1(100);
 80003c6:	2064      	movs	r0, #100	; 0x64
 80003c8:	f000 fc92 	bl	8000cf0 <setTimer1>
			}

			//check for button input
			if(isButtonPressed(BUTTON_INC)){
 80003cc:	2001      	movs	r0, #1
 80003ce:	f7ff ff8d 	bl	80002ec <isButtonPressed>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d018      	beq.n	800040a <fsm_simple_buttons_run+0xa2>
				//update the fsm status and increase counter, quick response display
				counter = (counter + 1) % 10;
 80003d8:	4b89      	ldr	r3, [pc, #548]	; (8000600 <fsm_simple_buttons_run+0x298>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	1c59      	adds	r1, r3, #1
 80003de:	4b89      	ldr	r3, [pc, #548]	; (8000604 <fsm_simple_buttons_run+0x29c>)
 80003e0:	fb83 2301 	smull	r2, r3, r3, r1
 80003e4:	109a      	asrs	r2, r3, #2
 80003e6:	17cb      	asrs	r3, r1, #31
 80003e8:	1ad2      	subs	r2, r2, r3
 80003ea:	4613      	mov	r3, r2
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	4413      	add	r3, r2
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	1aca      	subs	r2, r1, r3
 80003f4:	4b82      	ldr	r3, [pc, #520]	; (8000600 <fsm_simple_buttons_run+0x298>)
 80003f6:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 80003f8:	f000 fb3a 	bl	8000a70 <quickUpdate7Segment>
				status = INC;
 80003fc:	4b7f      	ldr	r3, [pc, #508]	; (80005fc <fsm_simple_buttons_run+0x294>)
 80003fe:	2203      	movs	r2, #3
 8000400:	601a      	str	r2, [r3, #0]
				//when leaving or entering auto mode, we need to set timer2 count down 10 second to return
				setTimer2(TIMEOUT);
 8000402:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000406:	f000 fc87 	bl	8000d18 <setTimer2>
			}
			if(isButtonPressed(BUTTON_DEC)){
 800040a:	2002      	movs	r0, #2
 800040c:	f7ff ff6e 	bl	80002ec <isButtonPressed>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d014      	beq.n	8000440 <fsm_simple_buttons_run+0xd8>
				//update the fsm status and increase counter, quick response display
				counter--;
 8000416:	4b7a      	ldr	r3, [pc, #488]	; (8000600 <fsm_simple_buttons_run+0x298>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	3b01      	subs	r3, #1
 800041c:	4a78      	ldr	r2, [pc, #480]	; (8000600 <fsm_simple_buttons_run+0x298>)
 800041e:	6013      	str	r3, [r2, #0]
				if(counter < 0) counter = 9;
 8000420:	4b77      	ldr	r3, [pc, #476]	; (8000600 <fsm_simple_buttons_run+0x298>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	da02      	bge.n	800042e <fsm_simple_buttons_run+0xc6>
 8000428:	4b75      	ldr	r3, [pc, #468]	; (8000600 <fsm_simple_buttons_run+0x298>)
 800042a:	2209      	movs	r2, #9
 800042c:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 800042e:	f000 fb1f 	bl	8000a70 <quickUpdate7Segment>
				status = DEC;
 8000432:	4b72      	ldr	r3, [pc, #456]	; (80005fc <fsm_simple_buttons_run+0x294>)
 8000434:	2204      	movs	r2, #4
 8000436:	601a      	str	r2, [r3, #0]
				//when leaving or entering auto mode, we need to set timer2 count down 10 second to return
				setTimer2(TIMEOUT);
 8000438:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800043c:	f000 fc6c 	bl	8000d18 <setTimer2>
			}
			if(isButtonPressed(BUTTON_RESET)) {
 8000440:	2000      	movs	r0, #0
 8000442:	f7ff ff53 	bl	80002ec <isButtonPressed>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	f000 822b 	beq.w	80008a4 <fsm_simple_buttons_run+0x53c>
				//clear counter, and quick response display
				counter = 0;
 800044e:	4b6c      	ldr	r3, [pc, #432]	; (8000600 <fsm_simple_buttons_run+0x298>)
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 8000454:	f000 fb0c 	bl	8000a70 <quickUpdate7Segment>
			}
			break;
 8000458:	e224      	b.n	80008a4 <fsm_simple_buttons_run+0x53c>

		case COUNT_DOWN:
			//periodic task
			if(isTimer1Expired()){
 800045a:	f000 fd25 	bl	8000ea8 <isTimer1Expired>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d010      	beq.n	8000486 <fsm_simple_buttons_run+0x11e>
				//decrease counter, display counter
				counter--;
 8000464:	4b66      	ldr	r3, [pc, #408]	; (8000600 <fsm_simple_buttons_run+0x298>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	3b01      	subs	r3, #1
 800046a:	4a65      	ldr	r2, [pc, #404]	; (8000600 <fsm_simple_buttons_run+0x298>)
 800046c:	6013      	str	r3, [r2, #0]
				quickUpdate7Segment();
 800046e:	f000 faff 	bl	8000a70 <quickUpdate7Segment>
				setTimer1(100);
 8000472:	2064      	movs	r0, #100	; 0x64
 8000474:	f000 fc3c 	bl	8000cf0 <setTimer1>
				if(counter == 0) {
 8000478:	4b61      	ldr	r3, [pc, #388]	; (8000600 <fsm_simple_buttons_run+0x298>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d102      	bne.n	8000486 <fsm_simple_buttons_run+0x11e>
					//if counter == 0 back to IDLE state
					status = IDLE;
 8000480:	4b5e      	ldr	r3, [pc, #376]	; (80005fc <fsm_simple_buttons_run+0x294>)
 8000482:	2201      	movs	r2, #1
 8000484:	601a      	str	r2, [r3, #0]
				}
			}

			//check for button input
			if(isButtonPressed(BUTTON_INC)){
 8000486:	2001      	movs	r0, #1
 8000488:	f7ff ff30 	bl	80002ec <isButtonPressed>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d018      	beq.n	80004c4 <fsm_simple_buttons_run+0x15c>
				//update the fsm status and increase counter
				status = INC;
 8000492:	4b5a      	ldr	r3, [pc, #360]	; (80005fc <fsm_simple_buttons_run+0x294>)
 8000494:	2203      	movs	r2, #3
 8000496:	601a      	str	r2, [r3, #0]
				counter = (counter + 1) % 10;
 8000498:	4b59      	ldr	r3, [pc, #356]	; (8000600 <fsm_simple_buttons_run+0x298>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	1c59      	adds	r1, r3, #1
 800049e:	4b59      	ldr	r3, [pc, #356]	; (8000604 <fsm_simple_buttons_run+0x29c>)
 80004a0:	fb83 2301 	smull	r2, r3, r3, r1
 80004a4:	109a      	asrs	r2, r3, #2
 80004a6:	17cb      	asrs	r3, r1, #31
 80004a8:	1ad2      	subs	r2, r2, r3
 80004aa:	4613      	mov	r3, r2
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	4413      	add	r3, r2
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	1aca      	subs	r2, r1, r3
 80004b4:	4b52      	ldr	r3, [pc, #328]	; (8000600 <fsm_simple_buttons_run+0x298>)
 80004b6:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 80004b8:	f000 fada 	bl	8000a70 <quickUpdate7Segment>
				//when leave auto mode, we need to set timer 10 second to return
				setTimer2(TIMEOUT);
 80004bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c0:	f000 fc2a 	bl	8000d18 <setTimer2>
			}
			if(isButtonPressed(BUTTON_DEC)){
 80004c4:	2002      	movs	r0, #2
 80004c6:	f7ff ff11 	bl	80002ec <isButtonPressed>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d014      	beq.n	80004fa <fsm_simple_buttons_run+0x192>
				//update the fsm status and increase counter
				status = DEC;
 80004d0:	4b4a      	ldr	r3, [pc, #296]	; (80005fc <fsm_simple_buttons_run+0x294>)
 80004d2:	2204      	movs	r2, #4
 80004d4:	601a      	str	r2, [r3, #0]
				counter--;
 80004d6:	4b4a      	ldr	r3, [pc, #296]	; (8000600 <fsm_simple_buttons_run+0x298>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	3b01      	subs	r3, #1
 80004dc:	4a48      	ldr	r2, [pc, #288]	; (8000600 <fsm_simple_buttons_run+0x298>)
 80004de:	6013      	str	r3, [r2, #0]
				if(counter < 0) counter = 9;
 80004e0:	4b47      	ldr	r3, [pc, #284]	; (8000600 <fsm_simple_buttons_run+0x298>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	da02      	bge.n	80004ee <fsm_simple_buttons_run+0x186>
 80004e8:	4b45      	ldr	r3, [pc, #276]	; (8000600 <fsm_simple_buttons_run+0x298>)
 80004ea:	2209      	movs	r2, #9
 80004ec:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 80004ee:	f000 fabf 	bl	8000a70 <quickUpdate7Segment>
				//when leave auto mode, we need to set timer 10 second to return
				setTimer2(TIMEOUT);
 80004f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f6:	f000 fc0f 	bl	8000d18 <setTimer2>
			}
			if(isButtonPressed(BUTTON_RESET)) {
 80004fa:	2000      	movs	r0, #0
 80004fc:	f7ff fef6 	bl	80002ec <isButtonPressed>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	f000 81d0 	beq.w	80008a8 <fsm_simple_buttons_run+0x540>
				//reset counter
				counter = 0;
 8000508:	4b3d      	ldr	r3, [pc, #244]	; (8000600 <fsm_simple_buttons_run+0x298>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 800050e:	f000 faaf 	bl	8000a70 <quickUpdate7Segment>
				//return to IDLE state
				status = IDLE;
 8000512:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <fsm_simple_buttons_run+0x294>)
 8000514:	2201      	movs	r2, #1
 8000516:	601a      	str	r2, [r3, #0]
			}
			break;
 8000518:	e1c6      	b.n	80008a8 <fsm_simple_buttons_run+0x540>

//INCREASEMENT
		case INC:
			//check for button input
			if(isButtonPressed(BUTTON_INC)){
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff fee6 	bl	80002ec <isButtonPressed>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d015      	beq.n	8000552 <fsm_simple_buttons_run+0x1ea>
				//we're in INC state, just need to increase counter and display it
				counter = (counter + 1) % 10;
 8000526:	4b36      	ldr	r3, [pc, #216]	; (8000600 <fsm_simple_buttons_run+0x298>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	1c59      	adds	r1, r3, #1
 800052c:	4b35      	ldr	r3, [pc, #212]	; (8000604 <fsm_simple_buttons_run+0x29c>)
 800052e:	fb83 2301 	smull	r2, r3, r3, r1
 8000532:	109a      	asrs	r2, r3, #2
 8000534:	17cb      	asrs	r3, r1, #31
 8000536:	1ad2      	subs	r2, r2, r3
 8000538:	4613      	mov	r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4413      	add	r3, r2
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	1aca      	subs	r2, r1, r3
 8000542:	4b2f      	ldr	r3, [pc, #188]	; (8000600 <fsm_simple_buttons_run+0x298>)
 8000544:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 8000546:	f000 fa93 	bl	8000a70 <quickUpdate7Segment>
				setTimer2(TIMEOUT);
 800054a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054e:	f000 fbe3 	bl	8000d18 <setTimer2>
			}
			if(isButtonPressed3s(BUTTON_INC)){
 8000552:	2001      	movs	r0, #1
 8000554:	f7ff feea 	bl	800032c <isButtonPressed3s>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d01b      	beq.n	8000596 <fsm_simple_buttons_run+0x22e>
				status = INC_HOLD;
 800055e:	4b27      	ldr	r3, [pc, #156]	; (80005fc <fsm_simple_buttons_run+0x294>)
 8000560:	220d      	movs	r2, #13
 8000562:	601a      	str	r2, [r3, #0]
				counter = (counter + 1) % 10;
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <fsm_simple_buttons_run+0x298>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	1c59      	adds	r1, r3, #1
 800056a:	4b26      	ldr	r3, [pc, #152]	; (8000604 <fsm_simple_buttons_run+0x29c>)
 800056c:	fb83 2301 	smull	r2, r3, r3, r1
 8000570:	109a      	asrs	r2, r3, #2
 8000572:	17cb      	asrs	r3, r1, #31
 8000574:	1ad2      	subs	r2, r2, r3
 8000576:	4613      	mov	r3, r2
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	4413      	add	r3, r2
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	1aca      	subs	r2, r1, r3
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <fsm_simple_buttons_run+0x298>)
 8000582:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 8000584:	f000 fa74 	bl	8000a70 <quickUpdate7Segment>
				setTimer3(100);
 8000588:	2064      	movs	r0, #100	; 0x64
 800058a:	f000 fbd9 	bl	8000d40 <setTimer3>
				setTimer2(TIMEOUT);
 800058e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000592:	f000 fbc1 	bl	8000d18 <setTimer2>
			}
			if(isButtonPressed(BUTTON_DEC)){
 8000596:	2002      	movs	r0, #2
 8000598:	f7ff fea8 	bl	80002ec <isButtonPressed>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d014      	beq.n	80005cc <fsm_simple_buttons_run+0x264>
				//update the fsm status and increase counter
				status = DEC;
 80005a2:	4b16      	ldr	r3, [pc, #88]	; (80005fc <fsm_simple_buttons_run+0x294>)
 80005a4:	2204      	movs	r2, #4
 80005a6:	601a      	str	r2, [r3, #0]
				counter--;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <fsm_simple_buttons_run+0x298>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3b01      	subs	r3, #1
 80005ae:	4a14      	ldr	r2, [pc, #80]	; (8000600 <fsm_simple_buttons_run+0x298>)
 80005b0:	6013      	str	r3, [r2, #0]
				if(counter < 0) counter = 9;
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <fsm_simple_buttons_run+0x298>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	da02      	bge.n	80005c0 <fsm_simple_buttons_run+0x258>
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <fsm_simple_buttons_run+0x298>)
 80005bc:	2209      	movs	r2, #9
 80005be:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 80005c0:	f000 fa56 	bl	8000a70 <quickUpdate7Segment>
				//when leave any, we need to set timer 10 second to return
				setTimer2(TIMEOUT);
 80005c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c8:	f000 fba6 	bl	8000d18 <setTimer2>
			}
			if(isButtonPressed(BUTTON_RESET)) {
 80005cc:	2000      	movs	r0, #0
 80005ce:	f7ff fe8d 	bl	80002ec <isButtonPressed>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d004      	beq.n	80005e2 <fsm_simple_buttons_run+0x27a>
				counter = 0;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <fsm_simple_buttons_run+0x298>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 80005de:	f000 fa47 	bl	8000a70 <quickUpdate7Segment>
			}

			//check timer2 to return to auto mode
			if(isTimer2Expired()) {
 80005e2:	f000 fc73 	bl	8000ecc <isTimer2Expired>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	f000 815f 	beq.w	80008ac <fsm_simple_buttons_run+0x544>
				status = COUNT_DOWN;
 80005ee:	4b03      	ldr	r3, [pc, #12]	; (80005fc <fsm_simple_buttons_run+0x294>)
 80005f0:	2202      	movs	r2, #2
 80005f2:	601a      	str	r2, [r3, #0]
				setTimer1(100);
 80005f4:	2064      	movs	r0, #100	; 0x64
 80005f6:	f000 fb7b 	bl	8000cf0 <setTimer1>
			}
			break;
 80005fa:	e157      	b.n	80008ac <fsm_simple_buttons_run+0x544>
 80005fc:	20000008 	.word	0x20000008
 8000600:	2000000c 	.word	0x2000000c
 8000604:	66666667 	.word	0x66666667


//DECREASEMENT
		case DEC:
			//check for button input
			if(isButtonPressed(BUTTON_INC)){
 8000608:	2001      	movs	r0, #1
 800060a:	f7ff fe6f 	bl	80002ec <isButtonPressed>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d018      	beq.n	8000646 <fsm_simple_buttons_run+0x2de>
				//update the fsm status and increase counter
				status = INC;
 8000614:	4baa      	ldr	r3, [pc, #680]	; (80008c0 <fsm_simple_buttons_run+0x558>)
 8000616:	2203      	movs	r2, #3
 8000618:	601a      	str	r2, [r3, #0]
				counter = (counter + 1) % 10;
 800061a:	4baa      	ldr	r3, [pc, #680]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	1c59      	adds	r1, r3, #1
 8000620:	4ba9      	ldr	r3, [pc, #676]	; (80008c8 <fsm_simple_buttons_run+0x560>)
 8000622:	fb83 2301 	smull	r2, r3, r3, r1
 8000626:	109a      	asrs	r2, r3, #2
 8000628:	17cb      	asrs	r3, r1, #31
 800062a:	1ad2      	subs	r2, r2, r3
 800062c:	4613      	mov	r3, r2
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	4413      	add	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	1aca      	subs	r2, r1, r3
 8000636:	4ba3      	ldr	r3, [pc, #652]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 8000638:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 800063a:	f000 fa19 	bl	8000a70 <quickUpdate7Segment>
				//when leave any, we need to set timer 10 second to return
				setTimer2(TIMEOUT);
 800063e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000642:	f000 fb69 	bl	8000d18 <setTimer2>
			}
			if(isButtonPressed(BUTTON_DEC)){
 8000646:	2002      	movs	r0, #2
 8000648:	f7ff fe50 	bl	80002ec <isButtonPressed>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d011      	beq.n	8000676 <fsm_simple_buttons_run+0x30e>
				//we're in DEC state, just need to decrease counter
				counter--;
 8000652:	4b9c      	ldr	r3, [pc, #624]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	3b01      	subs	r3, #1
 8000658:	4a9a      	ldr	r2, [pc, #616]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 800065a:	6013      	str	r3, [r2, #0]
				if(counter < 0) counter = 9;
 800065c:	4b99      	ldr	r3, [pc, #612]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	da02      	bge.n	800066a <fsm_simple_buttons_run+0x302>
 8000664:	4b97      	ldr	r3, [pc, #604]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 8000666:	2209      	movs	r2, #9
 8000668:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 800066a:	f000 fa01 	bl	8000a70 <quickUpdate7Segment>
				setTimer2(TIMEOUT);
 800066e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000672:	f000 fb51 	bl	8000d18 <setTimer2>
			}
			if(isButtonPressed3s(BUTTON_DEC)){
 8000676:	2002      	movs	r0, #2
 8000678:	f7ff fe58 	bl	800032c <isButtonPressed3s>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d018      	beq.n	80006b4 <fsm_simple_buttons_run+0x34c>
				status = DEC_HOLD;
 8000682:	4b8f      	ldr	r3, [pc, #572]	; (80008c0 <fsm_simple_buttons_run+0x558>)
 8000684:	220e      	movs	r2, #14
 8000686:	601a      	str	r2, [r3, #0]
				counter--;
 8000688:	4b8e      	ldr	r3, [pc, #568]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3b01      	subs	r3, #1
 800068e:	4a8d      	ldr	r2, [pc, #564]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 8000690:	6013      	str	r3, [r2, #0]
				if(counter < 0) counter = 9;
 8000692:	4b8c      	ldr	r3, [pc, #560]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	da02      	bge.n	80006a0 <fsm_simple_buttons_run+0x338>
 800069a:	4b8a      	ldr	r3, [pc, #552]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 800069c:	2209      	movs	r2, #9
 800069e:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 80006a0:	f000 f9e6 	bl	8000a70 <quickUpdate7Segment>
				setTimer3(400);	//3 second wait for button hold flag  and 1 second delay check if button is release
 80006a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80006a8:	f000 fb4a 	bl	8000d40 <setTimer3>
				setTimer2(TIMEOUT);
 80006ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b0:	f000 fb32 	bl	8000d18 <setTimer2>
			}
			if(isButtonPressed(BUTTON_RESET)) {
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff fe19 	bl	80002ec <isButtonPressed>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d004      	beq.n	80006ca <fsm_simple_buttons_run+0x362>
				counter = 0;
 80006c0:	4b80      	ldr	r3, [pc, #512]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 80006c6:	f000 f9d3 	bl	8000a70 <quickUpdate7Segment>
			}

			//check timer2 to return to auto mode
			if(isTimer2Expired()) {
 80006ca:	f000 fbff 	bl	8000ecc <isTimer2Expired>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	f000 80ed 	beq.w	80008b0 <fsm_simple_buttons_run+0x548>
				status = COUNT_DOWN;
 80006d6:	4b7a      	ldr	r3, [pc, #488]	; (80008c0 <fsm_simple_buttons_run+0x558>)
 80006d8:	2202      	movs	r2, #2
 80006da:	601a      	str	r2, [r3, #0]
				setTimer1(100);
 80006dc:	2064      	movs	r0, #100	; 0x64
 80006de:	f000 fb07 	bl	8000cf0 <setTimer1>
			}
			break;
 80006e2:	e0e5      	b.n	80008b0 <fsm_simple_buttons_run+0x548>

//long button press event implement status
//button INC hold
		case INC_HOLD:
			//check for button hold flag and increase counter
			if(isButtonPressed3s(BUTTON_INC)){
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff fe21 	bl	800032c <isButtonPressed3s>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d014      	beq.n	800071a <fsm_simple_buttons_run+0x3b2>
				counter = (counter + 1) % 10;
 80006f0:	4b74      	ldr	r3, [pc, #464]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	1c59      	adds	r1, r3, #1
 80006f6:	4b74      	ldr	r3, [pc, #464]	; (80008c8 <fsm_simple_buttons_run+0x560>)
 80006f8:	fb83 2301 	smull	r2, r3, r3, r1
 80006fc:	109a      	asrs	r2, r3, #2
 80006fe:	17cb      	asrs	r3, r1, #31
 8000700:	1ad2      	subs	r2, r2, r3
 8000702:	4613      	mov	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	4413      	add	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	1aca      	subs	r2, r1, r3
 800070c:	4b6d      	ldr	r3, [pc, #436]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 800070e:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 8000710:	f000 f9ae 	bl	8000a70 <quickUpdate7Segment>
				setTimer3(100); // wait for repeat
 8000714:	2064      	movs	r0, #100	; 0x64
 8000716:	f000 fb13 	bl	8000d40 <setTimer3>
			}
			//if button is pressed again, return button INC mode
			if(isButtonPressed(BUTTON_INC)){
 800071a:	2001      	movs	r0, #1
 800071c:	f7ff fde6 	bl	80002ec <isButtonPressed>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d01a      	beq.n	800075c <fsm_simple_buttons_run+0x3f4>
				counter = (counter + 1) % 10;
 8000726:	4b67      	ldr	r3, [pc, #412]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1c59      	adds	r1, r3, #1
 800072c:	4b66      	ldr	r3, [pc, #408]	; (80008c8 <fsm_simple_buttons_run+0x560>)
 800072e:	fb83 2301 	smull	r2, r3, r3, r1
 8000732:	109a      	asrs	r2, r3, #2
 8000734:	17cb      	asrs	r3, r1, #31
 8000736:	1ad2      	subs	r2, r2, r3
 8000738:	4613      	mov	r3, r2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	1aca      	subs	r2, r1, r3
 8000742:	4b60      	ldr	r3, [pc, #384]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 8000744:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 8000746:	f000 f993 	bl	8000a70 <quickUpdate7Segment>
				status = INC;
 800074a:	4b5d      	ldr	r3, [pc, #372]	; (80008c0 <fsm_simple_buttons_run+0x558>)
 800074c:	2203      	movs	r2, #3
 800074e:	601a      	str	r2, [r3, #0]
				clearTimer3();
 8000750:	f000 fb1e 	bl	8000d90 <clearTimer3>
				setTimer2(TIMEOUT);
 8000754:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000758:	f000 fade 	bl	8000d18 <setTimer2>
			}
			if(isButtonPressed(BUTTON_DEC)){
 800075c:	2002      	movs	r0, #2
 800075e:	f7ff fdc5 	bl	80002ec <isButtonPressed>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d016      	beq.n	8000796 <fsm_simple_buttons_run+0x42e>
				counter--;
 8000768:	4b56      	ldr	r3, [pc, #344]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3b01      	subs	r3, #1
 800076e:	4a55      	ldr	r2, [pc, #340]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 8000770:	6013      	str	r3, [r2, #0]
				if(counter < 0) counter = 9;
 8000772:	4b54      	ldr	r3, [pc, #336]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da02      	bge.n	8000780 <fsm_simple_buttons_run+0x418>
 800077a:	4b52      	ldr	r3, [pc, #328]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 800077c:	2209      	movs	r2, #9
 800077e:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 8000780:	f000 f976 	bl	8000a70 <quickUpdate7Segment>
				status = DEC;
 8000784:	4b4e      	ldr	r3, [pc, #312]	; (80008c0 <fsm_simple_buttons_run+0x558>)
 8000786:	2204      	movs	r2, #4
 8000788:	601a      	str	r2, [r3, #0]
				clearTimer3();
 800078a:	f000 fb01 	bl	8000d90 <clearTimer3>
				setTimer2(TIMEOUT);
 800078e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000792:	f000 fac1 	bl	8000d18 <setTimer2>
			}
			if(isButtonPressed(BUTTON_RESET)) {
 8000796:	2000      	movs	r0, #0
 8000798:	f7ff fda8 	bl	80002ec <isButtonPressed>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d004      	beq.n	80007ac <fsm_simple_buttons_run+0x444>
				counter = 0;
 80007a2:	4b48      	ldr	r3, [pc, #288]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 80007a8:	f000 f962 	bl	8000a70 <quickUpdate7Segment>
			}
			//if more than 1 second and no button hold flags, return to INC state
			if(isTimer3Expired()){
 80007ac:	f000 fba0 	bl	8000ef0 <isTimer3Expired>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d07e      	beq.n	80008b4 <fsm_simple_buttons_run+0x54c>
				status = INC;
 80007b6:	4b42      	ldr	r3, [pc, #264]	; (80008c0 <fsm_simple_buttons_run+0x558>)
 80007b8:	2203      	movs	r2, #3
 80007ba:	601a      	str	r2, [r3, #0]
				//refresh timeout duration for returning auto mode
				setTimer2(TIMEOUT - 100); //wait for timer3 1 second and then wait for timer 2 9 second
 80007bc:	f44f 7061 	mov.w	r0, #900	; 0x384
 80007c0:	f000 faaa 	bl	8000d18 <setTimer2>
			}
			break;
 80007c4:	e076      	b.n	80008b4 <fsm_simple_buttons_run+0x54c>

//button DEC hold
		case DEC_HOLD:
			//check for button hold flag and increase counter
			if(isButtonPressed3s(BUTTON_DEC)){
 80007c6:	2002      	movs	r0, #2
 80007c8:	f7ff fdb0 	bl	800032c <isButtonPressed3s>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d010      	beq.n	80007f4 <fsm_simple_buttons_run+0x48c>
				counter--;
 80007d2:	4b3c      	ldr	r3, [pc, #240]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	4a3a      	ldr	r2, [pc, #232]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 80007da:	6013      	str	r3, [r2, #0]
				if(counter < 0) counter = 9;
 80007dc:	4b39      	ldr	r3, [pc, #228]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	da02      	bge.n	80007ea <fsm_simple_buttons_run+0x482>
 80007e4:	4b37      	ldr	r3, [pc, #220]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 80007e6:	2209      	movs	r2, #9
 80007e8:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 80007ea:	f000 f941 	bl	8000a70 <quickUpdate7Segment>
				setTimer3(100); // wait for repeat
 80007ee:	2064      	movs	r0, #100	; 0x64
 80007f0:	f000 faa6 	bl	8000d40 <setTimer3>
			}
			//if button is pressed again, return button DEC mode
			if(isButtonPressed(BUTTON_DEC)){
 80007f4:	2002      	movs	r0, #2
 80007f6:	f7ff fd79 	bl	80002ec <isButtonPressed>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d016      	beq.n	800082e <fsm_simple_buttons_run+0x4c6>
				counter--;
 8000800:	4b30      	ldr	r3, [pc, #192]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	3b01      	subs	r3, #1
 8000806:	4a2f      	ldr	r2, [pc, #188]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 8000808:	6013      	str	r3, [r2, #0]
				if(counter < 0) counter = 9;
 800080a:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	da02      	bge.n	8000818 <fsm_simple_buttons_run+0x4b0>
 8000812:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 8000814:	2209      	movs	r2, #9
 8000816:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 8000818:	f000 f92a 	bl	8000a70 <quickUpdate7Segment>
				status = DEC;
 800081c:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <fsm_simple_buttons_run+0x558>)
 800081e:	2204      	movs	r2, #4
 8000820:	601a      	str	r2, [r3, #0]
				clearTimer3();
 8000822:	f000 fab5 	bl	8000d90 <clearTimer3>
				setTimer2(TIMEOUT);
 8000826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082a:	f000 fa75 	bl	8000d18 <setTimer2>
			}
			if(isButtonPressed(BUTTON_INC)){
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff fd5c 	bl	80002ec <isButtonPressed>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d01a      	beq.n	8000870 <fsm_simple_buttons_run+0x508>
				counter = (counter + 1) % 10;
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	1c59      	adds	r1, r3, #1
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <fsm_simple_buttons_run+0x560>)
 8000842:	fb83 2301 	smull	r2, r3, r3, r1
 8000846:	109a      	asrs	r2, r3, #2
 8000848:	17cb      	asrs	r3, r1, #31
 800084a:	1ad2      	subs	r2, r2, r3
 800084c:	4613      	mov	r3, r2
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	4413      	add	r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	1aca      	subs	r2, r1, r3
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 8000858:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 800085a:	f000 f909 	bl	8000a70 <quickUpdate7Segment>
				status = INC;
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <fsm_simple_buttons_run+0x558>)
 8000860:	2203      	movs	r2, #3
 8000862:	601a      	str	r2, [r3, #0]
				clearTimer3();
 8000864:	f000 fa94 	bl	8000d90 <clearTimer3>
				setTimer2(TIMEOUT);
 8000868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086c:	f000 fa54 	bl	8000d18 <setTimer2>
			}
			if(isButtonPressed(BUTTON_RESET)) {
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff fd3b 	bl	80002ec <isButtonPressed>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d004      	beq.n	8000886 <fsm_simple_buttons_run+0x51e>
				counter = 0;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <fsm_simple_buttons_run+0x55c>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
				quickUpdate7Segment();
 8000882:	f000 f8f5 	bl	8000a70 <quickUpdate7Segment>
			}
			//if more than 1 second and no button hold flags, return to INC state
			if(isTimer3Expired()){
 8000886:	f000 fb33 	bl	8000ef0 <isTimer3Expired>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d013      	beq.n	80008b8 <fsm_simple_buttons_run+0x550>
				status = DEC;
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <fsm_simple_buttons_run+0x558>)
 8000892:	2204      	movs	r2, #4
 8000894:	601a      	str	r2, [r3, #0]
				//refresh timeout duration for returning auto mode
				setTimer2(TIMEOUT - 100); //wait for timer3 for 1 second and then wait for timer 2 9 second
 8000896:	f44f 7061 	mov.w	r0, #900	; 0x384
 800089a:	f000 fa3d 	bl	8000d18 <setTimer2>
			}
			break;
 800089e:	e00b      	b.n	80008b8 <fsm_simple_buttons_run+0x550>
		default:
			break;
 80008a0:	bf00      	nop
 80008a2:	e00a      	b.n	80008ba <fsm_simple_buttons_run+0x552>
			break;
 80008a4:	bf00      	nop
 80008a6:	e008      	b.n	80008ba <fsm_simple_buttons_run+0x552>
			break;
 80008a8:	bf00      	nop
 80008aa:	e006      	b.n	80008ba <fsm_simple_buttons_run+0x552>
			break;
 80008ac:	bf00      	nop
 80008ae:	e004      	b.n	80008ba <fsm_simple_buttons_run+0x552>
			break;
 80008b0:	bf00      	nop
 80008b2:	e002      	b.n	80008ba <fsm_simple_buttons_run+0x552>
			break;
 80008b4:	bf00      	nop
 80008b6:	e000      	b.n	80008ba <fsm_simple_buttons_run+0x552>
			break;
 80008b8:	bf00      	nop
	}
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000008 	.word	0x20000008
 80008c4:	2000000c 	.word	0x2000000c
 80008c8:	66666667 	.word	0x66666667

080008cc <toggleLedRed>:
int status = IDLE;
//initialize counter with initial valued
int counter = 9;
//global function implementation

void toggleLedRed(){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	if(isTimer4Expired()){
 80008d0:	f000 fb20 	bl	8000f14 <isTimer4Expired>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d006      	beq.n	80008e8 <toggleLedRed+0x1c>
		setTimer4(100); //1 second toggle;
 80008da:	2064      	movs	r0, #100	; 0x64
 80008dc:	f000 fa44 	bl	8000d68 <setTimer4>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80008e0:	2120      	movs	r1, #32
 80008e2:	4802      	ldr	r0, [pc, #8]	; (80008ec <toggleLedRed+0x20>)
 80008e4:	f000 fef5 	bl	80016d2 <HAL_GPIO_TogglePin>
	}
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40010800 	.word	0x40010800

080008f0 <display7SEG1>:

#include "led7Segment.h"
#include "global.h"

//display 7 segment led using low byte of LED7PORT
void display7SEG1(int num){
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	if(num == 0){
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10c      	bne.n	8000918 <display7SEG1+0x28>
		LED7PORT -> ODR |= 0x00ff;
 80008fe:	4b51      	ldr	r3, [pc, #324]	; (8000a44 <display7SEG1+0x154>)
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	4a50      	ldr	r2, [pc, #320]	; (8000a44 <display7SEG1+0x154>)
 8000904:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000908:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff40;
 800090a:	4b4e      	ldr	r3, [pc, #312]	; (8000a44 <display7SEG1+0x154>)
 800090c:	68da      	ldr	r2, [r3, #12]
 800090e:	494d      	ldr	r1, [pc, #308]	; (8000a44 <display7SEG1+0x154>)
 8000910:	f64f 7340 	movw	r3, #65344	; 0xff40
 8000914:	4013      	ands	r3, r2
 8000916:	60cb      	str	r3, [r1, #12]
	}
	if(num == 1){
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d10c      	bne.n	8000938 <display7SEG1+0x48>
		LED7PORT -> ODR |= 0x00ff;
 800091e:	4b49      	ldr	r3, [pc, #292]	; (8000a44 <display7SEG1+0x154>)
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <display7SEG1+0x154>)
 8000924:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000928:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff79;
 800092a:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <display7SEG1+0x154>)
 800092c:	68da      	ldr	r2, [r3, #12]
 800092e:	4945      	ldr	r1, [pc, #276]	; (8000a44 <display7SEG1+0x154>)
 8000930:	f64f 7379 	movw	r3, #65401	; 0xff79
 8000934:	4013      	ands	r3, r2
 8000936:	60cb      	str	r3, [r1, #12]
	}
	if(num == 2){
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d10c      	bne.n	8000958 <display7SEG1+0x68>
		LED7PORT -> ODR |= 0x00ff;
 800093e:	4b41      	ldr	r3, [pc, #260]	; (8000a44 <display7SEG1+0x154>)
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	4a40      	ldr	r2, [pc, #256]	; (8000a44 <display7SEG1+0x154>)
 8000944:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000948:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff24;
 800094a:	4b3e      	ldr	r3, [pc, #248]	; (8000a44 <display7SEG1+0x154>)
 800094c:	68da      	ldr	r2, [r3, #12]
 800094e:	493d      	ldr	r1, [pc, #244]	; (8000a44 <display7SEG1+0x154>)
 8000950:	f64f 7324 	movw	r3, #65316	; 0xff24
 8000954:	4013      	ands	r3, r2
 8000956:	60cb      	str	r3, [r1, #12]
	}
	if(num == 3){
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b03      	cmp	r3, #3
 800095c:	d10c      	bne.n	8000978 <display7SEG1+0x88>
		LED7PORT -> ODR |= 0x00ff;
 800095e:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <display7SEG1+0x154>)
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	4a38      	ldr	r2, [pc, #224]	; (8000a44 <display7SEG1+0x154>)
 8000964:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000968:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff30;
 800096a:	4b36      	ldr	r3, [pc, #216]	; (8000a44 <display7SEG1+0x154>)
 800096c:	68da      	ldr	r2, [r3, #12]
 800096e:	4935      	ldr	r1, [pc, #212]	; (8000a44 <display7SEG1+0x154>)
 8000970:	f64f 7330 	movw	r3, #65328	; 0xff30
 8000974:	4013      	ands	r3, r2
 8000976:	60cb      	str	r3, [r1, #12]
	}
	if(num == 4){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b04      	cmp	r3, #4
 800097c:	d10c      	bne.n	8000998 <display7SEG1+0xa8>
		LED7PORT -> ODR |= 0x00ff;
 800097e:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <display7SEG1+0x154>)
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	4a30      	ldr	r2, [pc, #192]	; (8000a44 <display7SEG1+0x154>)
 8000984:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000988:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff19;
 800098a:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <display7SEG1+0x154>)
 800098c:	68da      	ldr	r2, [r3, #12]
 800098e:	492d      	ldr	r1, [pc, #180]	; (8000a44 <display7SEG1+0x154>)
 8000990:	f64f 7319 	movw	r3, #65305	; 0xff19
 8000994:	4013      	ands	r3, r2
 8000996:	60cb      	str	r3, [r1, #12]
	}
	if(num == 5){
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b05      	cmp	r3, #5
 800099c:	d10c      	bne.n	80009b8 <display7SEG1+0xc8>
		LED7PORT -> ODR |= 0x00ff;
 800099e:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <display7SEG1+0x154>)
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	4a28      	ldr	r2, [pc, #160]	; (8000a44 <display7SEG1+0x154>)
 80009a4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80009a8:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff12;
 80009aa:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <display7SEG1+0x154>)
 80009ac:	68da      	ldr	r2, [r3, #12]
 80009ae:	4925      	ldr	r1, [pc, #148]	; (8000a44 <display7SEG1+0x154>)
 80009b0:	f64f 7312 	movw	r3, #65298	; 0xff12
 80009b4:	4013      	ands	r3, r2
 80009b6:	60cb      	str	r3, [r1, #12]
	}
	if(num == 6){
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b06      	cmp	r3, #6
 80009bc:	d10c      	bne.n	80009d8 <display7SEG1+0xe8>
		LED7PORT -> ODR |= 0x00ff;
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <display7SEG1+0x154>)
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	4a20      	ldr	r2, [pc, #128]	; (8000a44 <display7SEG1+0x154>)
 80009c4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80009c8:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff02;
 80009ca:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <display7SEG1+0x154>)
 80009cc:	68da      	ldr	r2, [r3, #12]
 80009ce:	491d      	ldr	r1, [pc, #116]	; (8000a44 <display7SEG1+0x154>)
 80009d0:	f64f 7302 	movw	r3, #65282	; 0xff02
 80009d4:	4013      	ands	r3, r2
 80009d6:	60cb      	str	r3, [r1, #12]
	}
	if(num == 7){
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b07      	cmp	r3, #7
 80009dc:	d10c      	bne.n	80009f8 <display7SEG1+0x108>
		LED7PORT -> ODR |= 0x00ff;
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <display7SEG1+0x154>)
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <display7SEG1+0x154>)
 80009e4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80009e8:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff78;
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <display7SEG1+0x154>)
 80009ec:	68da      	ldr	r2, [r3, #12]
 80009ee:	4915      	ldr	r1, [pc, #84]	; (8000a44 <display7SEG1+0x154>)
 80009f0:	f64f 7378 	movw	r3, #65400	; 0xff78
 80009f4:	4013      	ands	r3, r2
 80009f6:	60cb      	str	r3, [r1, #12]
	}
	if(num == 8){
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b08      	cmp	r3, #8
 80009fc:	d10c      	bne.n	8000a18 <display7SEG1+0x128>
		LED7PORT -> ODR |= 0x00ff;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <display7SEG1+0x154>)
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <display7SEG1+0x154>)
 8000a04:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000a08:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff80;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <display7SEG1+0x154>)
 8000a0c:	68da      	ldr	r2, [r3, #12]
 8000a0e:	490d      	ldr	r1, [pc, #52]	; (8000a44 <display7SEG1+0x154>)
 8000a10:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000a14:	4013      	ands	r3, r2
 8000a16:	60cb      	str	r3, [r1, #12]
	}
	if(num == 9){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b09      	cmp	r3, #9
 8000a1c:	d10c      	bne.n	8000a38 <display7SEG1+0x148>
		LED7PORT -> ODR |= 0x00ff;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <display7SEG1+0x154>)
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <display7SEG1+0x154>)
 8000a24:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000a28:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff90;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <display7SEG1+0x154>)
 8000a2c:	68da      	ldr	r2, [r3, #12]
 8000a2e:	4905      	ldr	r1, [pc, #20]	; (8000a44 <display7SEG1+0x154>)
 8000a30:	f64f 7390 	movw	r3, #65424	; 0xff90
 8000a34:	4013      	ands	r3, r2
 8000a36:	60cb      	str	r3, [r1, #12]
	}
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40010c00 	.word	0x40010c00

08000a48 <update7Segment>:
		LED7PORT -> ODR &= 0x90ff;
	}
}

//periodic update fuction
void update7Segment(){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	if(isTimer0Expired()){
 8000a4c:	f000 fa1a 	bl	8000e84 <isTimer0Expired>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d007      	beq.n	8000a66 <update7Segment+0x1e>
		//using timer 0, update number every 1 second
		setTimer0(100);
 8000a56:	2064      	movs	r0, #100	; 0x64
 8000a58:	f000 f936 	bl	8000cc8 <setTimer0>
		//using the lower part of PORTB
		display7SEG1(counter);
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <update7Segment+0x24>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff45 	bl	80008f0 <display7SEG1>
	}
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000000c 	.word	0x2000000c

08000a70 <quickUpdate7Segment>:

//quick response function
void quickUpdate7Segment(){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	display7SEG1(counter);
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <quickUpdate7Segment+0x14>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff39 	bl	80008f0 <display7SEG1>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000000c 	.word	0x2000000c

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fb08 	bl	80010a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f820 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000a94:	f000 f85a 	bl	8000b4c <MX_TIM2_Init>
  MX_GPIO_Init();
 8000a98:	f000 f8a4 	bl	8000be4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <main+0x44>)
 8000a9e:	f001 fa69 	bl	8001f74 <HAL_TIM_Base_Start_IT>
  initButton();
 8000aa2:	f7ff fb53 	bl	800014c <initButton>
  //set timer 0 for led update
  setTimer0(1);
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f000 f90e 	bl	8000cc8 <setTimer0>
  //initial led red and toggle timer
  setTimer4(100);
 8000aac:	2064      	movs	r0, #100	; 0x64
 8000aae:	f000 f95b 	bl	8000d68 <setTimer4>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2120      	movs	r1, #32
 8000ab6:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <main+0x48>)
 8000ab8:	f000 fdf3 	bl	80016a2 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_simple_buttons_run();
 8000abc:	f7ff fc54 	bl	8000368 <fsm_simple_buttons_run>
	  toggleLedRed();
 8000ac0:	f7ff ff04 	bl	80008cc <toggleLedRed>
	  update7Segment();
 8000ac4:	f7ff ffc0 	bl	8000a48 <update7Segment>
	  fsm_simple_buttons_run();
 8000ac8:	e7f8      	b.n	8000abc <main+0x34>
 8000aca:	bf00      	nop
 8000acc:	20000098 	.word	0x20000098
 8000ad0:	40010800 	.word	0x40010800

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b090      	sub	sp, #64	; 0x40
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 0318 	add.w	r3, r7, #24
 8000ade:	2228      	movs	r2, #40	; 0x28
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 fdfe 	bl	80026e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afa:	2301      	movs	r3, #1
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afe:	2310      	movs	r3, #16
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	f107 0318 	add.w	r3, r7, #24
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 fdfa 	bl	8001704 <HAL_RCC_OscConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b16:	f000 f8d1 	bl	8000cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 f866 	bl	8001c04 <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b3e:	f000 f8bd 	bl	8000cbc <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3740      	adds	r7, #64	; 0x40
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b60:	463b      	mov	r3, r7
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <MX_TIM2_Init+0x94>)
 8000b6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_TIM2_Init+0x94>)
 8000b72:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_TIM2_Init+0x94>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <MX_TIM2_Init+0x94>)
 8000b80:	220a      	movs	r2, #10
 8000b82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MX_TIM2_Init+0x94>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_TIM2_Init+0x94>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b90:	4813      	ldr	r0, [pc, #76]	; (8000be0 <MX_TIM2_Init+0x94>)
 8000b92:	f001 f99f 	bl	8001ed4 <HAL_TIM_Base_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b9c:	f000 f88e 	bl	8000cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	4619      	mov	r1, r3
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <MX_TIM2_Init+0x94>)
 8000bae:	f001 fb35 	bl	800221c <HAL_TIM_ConfigClockSource>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bb8:	f000 f880 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_TIM2_Init+0x94>)
 8000bca:	f001 fcfd 	bl	80025c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bd4:	f000 f872 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000098 	.word	0x20000098

08000be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b27      	ldr	r3, [pc, #156]	; (8000c98 <MX_GPIO_Init+0xb4>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a26      	ldr	r2, [pc, #152]	; (8000c98 <MX_GPIO_Init+0xb4>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <MX_GPIO_Init+0xb4>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <MX_GPIO_Init+0xb4>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a20      	ldr	r2, [pc, #128]	; (8000c98 <MX_GPIO_Init+0xb4>)
 8000c16:	f043 0308 	orr.w	r3, r3, #8
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <MX_GPIO_Init+0xb4>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2120      	movs	r1, #32
 8000c2c:	481b      	ldr	r0, [pc, #108]	; (8000c9c <MX_GPIO_Init+0xb8>)
 8000c2e:	f000 fd38 	bl	80016a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin
 8000c32:	2200      	movs	r2, #0
 8000c34:	217f      	movs	r1, #127	; 0x7f
 8000c36:	481a      	ldr	r0, [pc, #104]	; (8000ca0 <MX_GPIO_Init+0xbc>)
 8000c38:	f000 fd33 	bl	80016a2 <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c3c:	2320      	movs	r3, #32
 8000c3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	4619      	mov	r1, r3
 8000c52:	4812      	ldr	r0, [pc, #72]	; (8000c9c <MX_GPIO_Init+0xb8>)
 8000c54:	f000 fb94 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 8000c58:	237f      	movs	r3, #127	; 0x7f
 8000c5a:	60bb      	str	r3, [r7, #8]
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2302      	movs	r3, #2
 8000c66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <MX_GPIO_Init+0xbc>)
 8000c70:	f000 fb86 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 8000c74:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	4619      	mov	r1, r3
 8000c88:	4804      	ldr	r0, [pc, #16]	; (8000c9c <MX_GPIO_Init+0xb8>)
 8000c8a:	f000 fb79 	bl	8001380 <HAL_GPIO_Init>

}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010800 	.word	0x40010800
 8000ca0:	40010c00 	.word	0x40010c00

08000ca4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  timerRun();
 8000cac:	f000 f880 	bl	8000db0 <timerRun>
  button_reading();
 8000cb0:	f7ff fa8a 	bl	80001c8 <button_reading>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <setTimer0>:
int timer1_flag = 0;
int timer2_flag = 0;
int timer3_flag = 0;
int timer4_flag = 0;

void setTimer0(int duration){
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	timer0_cnt = duration;
 8000cd0:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <setTimer0+0x20>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <setTimer0+0x24>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000054 	.word	0x20000054
 8000cec:	20000068 	.word	0x20000068

08000cf0 <setTimer1>:

void setTimer1(int duration){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	timer1_cnt = duration;
 8000cf8:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <setTimer1+0x20>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000cfe:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <setTimer1+0x24>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000058 	.word	0x20000058
 8000d14:	2000006c 	.word	0x2000006c

08000d18 <setTimer2>:
void setTimer2(int duration){
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	timer2_cnt = duration;
 8000d20:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <setTimer2+0x20>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <setTimer2+0x24>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	2000005c 	.word	0x2000005c
 8000d3c:	20000070 	.word	0x20000070

08000d40 <setTimer3>:

void setTimer3(int duration){
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	timer3_cnt = duration;
 8000d48:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <setTimer3+0x20>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <setTimer3+0x24>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000060 	.word	0x20000060
 8000d64:	20000074 	.word	0x20000074

08000d68 <setTimer4>:

void setTimer4(int duration){
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	timer4_cnt = duration;
 8000d70:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <setTimer4+0x20>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <setTimer4+0x24>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000064 	.word	0x20000064
 8000d8c:	20000078 	.word	0x20000078

08000d90 <clearTimer3>:
void clearTimer2(){
	timer2_cnt = 0;
	timer2_flag = 0;
}

void clearTimer3(){
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
	timer3_cnt = 0;
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <clearTimer3+0x18>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
	timer3_flag = 0;
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <clearTimer3+0x1c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	20000060 	.word	0x20000060
 8000dac:	20000074 	.word	0x20000074

08000db0 <timerRun>:
void clearTimer4(){
	timer4_cnt = 0;
	timer4_flag = 0;
}

void timerRun(){
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
	if(timer0_cnt > 0){
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <timerRun+0xac>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	dd0b      	ble.n	8000dd4 <timerRun+0x24>
		timer0_cnt--;
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <timerRun+0xac>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	4a26      	ldr	r2, [pc, #152]	; (8000e5c <timerRun+0xac>)
 8000dc4:	6013      	str	r3, [r2, #0]
		if(timer0_cnt <= 0) timer0_flag = 1;
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <timerRun+0xac>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	dc02      	bgt.n	8000dd4 <timerRun+0x24>
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <timerRun+0xb0>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]
	}
	if(timer1_cnt > 0){
 8000dd4:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <timerRun+0xb4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	dd0b      	ble.n	8000df4 <timerRun+0x44>
		timer1_cnt--;
 8000ddc:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <timerRun+0xb4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <timerRun+0xb4>)
 8000de4:	6013      	str	r3, [r2, #0]
		if(timer1_cnt <= 0) timer1_flag = 1;
 8000de6:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <timerRun+0xb4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	dc02      	bgt.n	8000df4 <timerRun+0x44>
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <timerRun+0xb8>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
	}
	if(timer2_cnt > 0){
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <timerRun+0xbc>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	dd0b      	ble.n	8000e14 <timerRun+0x64>
		timer2_cnt--;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <timerRun+0xbc>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	4a1a      	ldr	r2, [pc, #104]	; (8000e6c <timerRun+0xbc>)
 8000e04:	6013      	str	r3, [r2, #0]
		if(timer2_cnt <= 0) timer2_flag = 1;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <timerRun+0xbc>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	dc02      	bgt.n	8000e14 <timerRun+0x64>
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <timerRun+0xc0>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]
	}
	if(timer3_cnt > 0){
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <timerRun+0xc4>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dd0b      	ble.n	8000e34 <timerRun+0x84>
		timer3_cnt--;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <timerRun+0xc4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <timerRun+0xc4>)
 8000e24:	6013      	str	r3, [r2, #0]
		if(timer3_cnt <= 0) timer3_flag = 1;
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <timerRun+0xc4>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	dc02      	bgt.n	8000e34 <timerRun+0x84>
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <timerRun+0xc8>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	601a      	str	r2, [r3, #0]
	}
	if(timer4_cnt > 0){
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <timerRun+0xcc>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	dd0b      	ble.n	8000e54 <timerRun+0xa4>
		timer4_cnt--;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <timerRun+0xcc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <timerRun+0xcc>)
 8000e44:	6013      	str	r3, [r2, #0]
		if(timer4_cnt == 0) timer4_flag = 1;
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <timerRun+0xcc>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <timerRun+0xa4>
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <timerRun+0xd0>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]
	}
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	20000054 	.word	0x20000054
 8000e60:	20000068 	.word	0x20000068
 8000e64:	20000058 	.word	0x20000058
 8000e68:	2000006c 	.word	0x2000006c
 8000e6c:	2000005c 	.word	0x2000005c
 8000e70:	20000070 	.word	0x20000070
 8000e74:	20000060 	.word	0x20000060
 8000e78:	20000074 	.word	0x20000074
 8000e7c:	20000064 	.word	0x20000064
 8000e80:	20000078 	.word	0x20000078

08000e84 <isTimer0Expired>:

int isTimer0Expired(){
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
	if(timer0_flag == 1){
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <isTimer0Expired+0x20>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d104      	bne.n	8000e9a <isTimer0Expired+0x16>
		timer0_flag = 0;
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <isTimer0Expired+0x20>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
		return 1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <isTimer0Expired+0x18>
	} else return 0;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	20000068 	.word	0x20000068

08000ea8 <isTimer1Expired>:

int isTimer1Expired(){
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
	if(timer1_flag == 1){
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <isTimer1Expired+0x20>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d104      	bne.n	8000ebe <isTimer1Expired+0x16>
		timer1_flag = 0;
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <isTimer1Expired+0x20>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
		return 1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <isTimer1Expired+0x18>
	} else return 0;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	2000006c 	.word	0x2000006c

08000ecc <isTimer2Expired>:

int isTimer2Expired(){
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
	if(timer2_flag == 1){
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <isTimer2Expired+0x20>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d104      	bne.n	8000ee2 <isTimer2Expired+0x16>
		timer2_flag = 0;
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <isTimer2Expired+0x20>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
		return 1;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <isTimer2Expired+0x18>
	} else return 0;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	20000070 	.word	0x20000070

08000ef0 <isTimer3Expired>:

int isTimer3Expired(){
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <isTimer3Expired+0x20>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d104      	bne.n	8000f06 <isTimer3Expired+0x16>
		timer3_flag = 0;
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <isTimer3Expired+0x20>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
		return 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <isTimer3Expired+0x18>
	} else return 0;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	20000074 	.word	0x20000074

08000f14 <isTimer4Expired>:

int isTimer4Expired(){
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
	if(timer4_flag == 1){
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <isTimer4Expired+0x20>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d104      	bne.n	8000f2a <isTimer4Expired+0x16>
		timer4_flag = 0;
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <isTimer4Expired+0x20>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
		return 1;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <isTimer4Expired+0x18>
	} else return 0;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	20000078 	.word	0x20000078

08000f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_MspInit+0x5c>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <HAL_MspInit+0x5c>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6193      	str	r3, [r2, #24]
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_MspInit+0x5c>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_MspInit+0x5c>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <HAL_MspInit+0x5c>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <HAL_MspInit+0x5c>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_MspInit+0x60>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_MspInit+0x60>)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40010000 	.word	0x40010000

08000f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fac:	d113      	bne.n	8000fd6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <HAL_TIM_Base_MspInit+0x44>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <HAL_TIM_Base_MspInit+0x44>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <HAL_TIM_Base_MspInit+0x44>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	201c      	movs	r0, #28
 8000fcc:	f000 f9a1 	bl	8001312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fd0:	201c      	movs	r0, #28
 8000fd2:	f000 f9ba 	bl	800134a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr

0800100e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102a:	f000 f87f 	bl	800112c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <TIM2_IRQHandler+0x10>)
 800103a:	f000 ffe7 	bl	800200c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000098 	.word	0x20000098

08001048 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001056:	490d      	ldr	r1, [pc, #52]	; (800108c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800106c:	4c0a      	ldr	r4, [pc, #40]	; (8001098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800107a:	f7ff ffe5 	bl	8001048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800107e:	f001 fb0d 	bl	800269c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001082:	f7ff fd01 	bl	8000a88 <main>
  bx lr
 8001086:	4770      	bx	lr
  ldr r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800108c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001090:	08002734 	.word	0x08002734
  ldr r2, =_sbss
 8001094:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001098:	200000e4 	.word	0x200000e4

0800109c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC1_2_IRQHandler>
	...

080010a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_Init+0x28>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_Init+0x28>)
 80010aa:	f043 0310 	orr.w	r3, r3, #16
 80010ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b0:	2003      	movs	r0, #3
 80010b2:	f000 f923 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b6:	200f      	movs	r0, #15
 80010b8:	f000 f808 	bl	80010cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010bc:	f7ff ff3c 	bl	8000f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40022000 	.word	0x40022000

080010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_InitTick+0x54>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_InitTick+0x58>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f93b 	bl	8001366 <HAL_SYSTICK_Config>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00e      	b.n	8001118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b0f      	cmp	r3, #15
 80010fe:	d80a      	bhi.n	8001116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001100:	2200      	movs	r2, #0
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	f000 f903 	bl	8001312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800110c:	4a06      	ldr	r2, [pc, #24]	; (8001128 <HAL_InitTick+0x5c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	e000      	b.n	8001118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000010 	.word	0x20000010
 8001124:	20000018 	.word	0x20000018
 8001128:	20000014 	.word	0x20000014

0800112c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_IncTick+0x1c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_IncTick+0x20>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a03      	ldr	r2, [pc, #12]	; (800114c <HAL_IncTick+0x20>)
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	20000018 	.word	0x20000018
 800114c:	200000e0 	.word	0x200000e0

08001150 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return uwTick;
 8001154:	4b02      	ldr	r3, [pc, #8]	; (8001160 <HAL_GetTick+0x10>)
 8001156:	681b      	ldr	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	200000e0 	.word	0x200000e0

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4906      	ldr	r1, [pc, #24]	; (80011fc <__NVIC_EnableIRQ+0x34>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	; (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	; (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff90 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff2d 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001324:	f7ff ff42 	bl	80011ac <__NVIC_GetPriorityGrouping>
 8001328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff ff90 	bl	8001254 <NVIC_EncodePriority>
 8001334:	4602      	mov	r2, r0
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff5f 	bl	8001200 <__NVIC_SetPriority>
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff35 	bl	80011c8 <__NVIC_EnableIRQ>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ffa2 	bl	80012b8 <SysTick_Config>
 8001374:	4603      	mov	r3, r0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b08b      	sub	sp, #44	; 0x2c
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001392:	e148      	b.n	8001626 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001394:	2201      	movs	r2, #1
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	f040 8137 	bne.w	8001620 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4aa3      	ldr	r2, [pc, #652]	; (8001644 <HAL_GPIO_Init+0x2c4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d05e      	beq.n	800147a <HAL_GPIO_Init+0xfa>
 80013bc:	4aa1      	ldr	r2, [pc, #644]	; (8001644 <HAL_GPIO_Init+0x2c4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d875      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013c2:	4aa1      	ldr	r2, [pc, #644]	; (8001648 <HAL_GPIO_Init+0x2c8>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d058      	beq.n	800147a <HAL_GPIO_Init+0xfa>
 80013c8:	4a9f      	ldr	r2, [pc, #636]	; (8001648 <HAL_GPIO_Init+0x2c8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d86f      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013ce:	4a9f      	ldr	r2, [pc, #636]	; (800164c <HAL_GPIO_Init+0x2cc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d052      	beq.n	800147a <HAL_GPIO_Init+0xfa>
 80013d4:	4a9d      	ldr	r2, [pc, #628]	; (800164c <HAL_GPIO_Init+0x2cc>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d869      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013da:	4a9d      	ldr	r2, [pc, #628]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d04c      	beq.n	800147a <HAL_GPIO_Init+0xfa>
 80013e0:	4a9b      	ldr	r2, [pc, #620]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d863      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013e6:	4a9b      	ldr	r2, [pc, #620]	; (8001654 <HAL_GPIO_Init+0x2d4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d046      	beq.n	800147a <HAL_GPIO_Init+0xfa>
 80013ec:	4a99      	ldr	r2, [pc, #612]	; (8001654 <HAL_GPIO_Init+0x2d4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d85d      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013f2:	2b12      	cmp	r3, #18
 80013f4:	d82a      	bhi.n	800144c <HAL_GPIO_Init+0xcc>
 80013f6:	2b12      	cmp	r3, #18
 80013f8:	d859      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013fa:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <HAL_GPIO_Init+0x80>)
 80013fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001400:	0800147b 	.word	0x0800147b
 8001404:	08001455 	.word	0x08001455
 8001408:	08001467 	.word	0x08001467
 800140c:	080014a9 	.word	0x080014a9
 8001410:	080014af 	.word	0x080014af
 8001414:	080014af 	.word	0x080014af
 8001418:	080014af 	.word	0x080014af
 800141c:	080014af 	.word	0x080014af
 8001420:	080014af 	.word	0x080014af
 8001424:	080014af 	.word	0x080014af
 8001428:	080014af 	.word	0x080014af
 800142c:	080014af 	.word	0x080014af
 8001430:	080014af 	.word	0x080014af
 8001434:	080014af 	.word	0x080014af
 8001438:	080014af 	.word	0x080014af
 800143c:	080014af 	.word	0x080014af
 8001440:	080014af 	.word	0x080014af
 8001444:	0800145d 	.word	0x0800145d
 8001448:	08001471 	.word	0x08001471
 800144c:	4a82      	ldr	r2, [pc, #520]	; (8001658 <HAL_GPIO_Init+0x2d8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d013      	beq.n	800147a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001452:	e02c      	b.n	80014ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	623b      	str	r3, [r7, #32]
          break;
 800145a:	e029      	b.n	80014b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	3304      	adds	r3, #4
 8001462:	623b      	str	r3, [r7, #32]
          break;
 8001464:	e024      	b.n	80014b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	3308      	adds	r3, #8
 800146c:	623b      	str	r3, [r7, #32]
          break;
 800146e:	e01f      	b.n	80014b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	330c      	adds	r3, #12
 8001476:	623b      	str	r3, [r7, #32]
          break;
 8001478:	e01a      	b.n	80014b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001482:	2304      	movs	r3, #4
 8001484:	623b      	str	r3, [r7, #32]
          break;
 8001486:	e013      	b.n	80014b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d105      	bne.n	800149c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001490:	2308      	movs	r3, #8
 8001492:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69fa      	ldr	r2, [r7, #28]
 8001498:	611a      	str	r2, [r3, #16]
          break;
 800149a:	e009      	b.n	80014b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800149c:	2308      	movs	r3, #8
 800149e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	615a      	str	r2, [r3, #20]
          break;
 80014a6:	e003      	b.n	80014b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
          break;
 80014ac:	e000      	b.n	80014b0 <HAL_GPIO_Init+0x130>
          break;
 80014ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2bff      	cmp	r3, #255	; 0xff
 80014b4:	d801      	bhi.n	80014ba <HAL_GPIO_Init+0x13a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	e001      	b.n	80014be <HAL_GPIO_Init+0x13e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3304      	adds	r3, #4
 80014be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2bff      	cmp	r3, #255	; 0xff
 80014c4:	d802      	bhi.n	80014cc <HAL_GPIO_Init+0x14c>
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	e002      	b.n	80014d2 <HAL_GPIO_Init+0x152>
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	3b08      	subs	r3, #8
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	210f      	movs	r1, #15
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	401a      	ands	r2, r3
 80014e4:	6a39      	ldr	r1, [r7, #32]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	431a      	orrs	r2, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8090 	beq.w	8001620 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001500:	4b56      	ldr	r3, [pc, #344]	; (800165c <HAL_GPIO_Init+0x2dc>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a55      	ldr	r2, [pc, #340]	; (800165c <HAL_GPIO_Init+0x2dc>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <HAL_GPIO_Init+0x2dc>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001518:	4a51      	ldr	r2, [pc, #324]	; (8001660 <HAL_GPIO_Init+0x2e0>)
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	089b      	lsrs	r3, r3, #2
 800151e:	3302      	adds	r3, #2
 8001520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001524:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	220f      	movs	r2, #15
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	4013      	ands	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a49      	ldr	r2, [pc, #292]	; (8001664 <HAL_GPIO_Init+0x2e4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d00d      	beq.n	8001560 <HAL_GPIO_Init+0x1e0>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a48      	ldr	r2, [pc, #288]	; (8001668 <HAL_GPIO_Init+0x2e8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d007      	beq.n	800155c <HAL_GPIO_Init+0x1dc>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a47      	ldr	r2, [pc, #284]	; (800166c <HAL_GPIO_Init+0x2ec>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d101      	bne.n	8001558 <HAL_GPIO_Init+0x1d8>
 8001554:	2302      	movs	r3, #2
 8001556:	e004      	b.n	8001562 <HAL_GPIO_Init+0x1e2>
 8001558:	2303      	movs	r3, #3
 800155a:	e002      	b.n	8001562 <HAL_GPIO_Init+0x1e2>
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <HAL_GPIO_Init+0x1e2>
 8001560:	2300      	movs	r3, #0
 8001562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001564:	f002 0203 	and.w	r2, r2, #3
 8001568:	0092      	lsls	r2, r2, #2
 800156a:	4093      	lsls	r3, r2
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001572:	493b      	ldr	r1, [pc, #236]	; (8001660 <HAL_GPIO_Init+0x2e0>)
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d006      	beq.n	800159a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800158c:	4b38      	ldr	r3, [pc, #224]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4937      	ldr	r1, [pc, #220]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	600b      	str	r3, [r1, #0]
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800159a:	4b35      	ldr	r3, [pc, #212]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	4933      	ldr	r1, [pc, #204]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b4:	4b2e      	ldr	r3, [pc, #184]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	492d      	ldr	r1, [pc, #180]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015c2:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	4929      	ldr	r1, [pc, #164]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d006      	beq.n	80015ea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	4923      	ldr	r1, [pc, #140]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
 80015e8:	e006      	b.n	80015f8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	491f      	ldr	r1, [pc, #124]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d006      	beq.n	8001612 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	4919      	ldr	r1, [pc, #100]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	60cb      	str	r3, [r1, #12]
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	43db      	mvns	r3, r3
 800161a:	4915      	ldr	r1, [pc, #84]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 800161c:	4013      	ands	r3, r2
 800161e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	3301      	adds	r3, #1
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	f47f aeaf 	bne.w	8001394 <HAL_GPIO_Init+0x14>
  }
}
 8001636:	bf00      	nop
 8001638:	bf00      	nop
 800163a:	372c      	adds	r7, #44	; 0x2c
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	10320000 	.word	0x10320000
 8001648:	10310000 	.word	0x10310000
 800164c:	10220000 	.word	0x10220000
 8001650:	10210000 	.word	0x10210000
 8001654:	10120000 	.word	0x10120000
 8001658:	10110000 	.word	0x10110000
 800165c:	40021000 	.word	0x40021000
 8001660:	40010000 	.word	0x40010000
 8001664:	40010800 	.word	0x40010800
 8001668:	40010c00 	.word	0x40010c00
 800166c:	40011000 	.word	0x40011000
 8001670:	40010400 	.word	0x40010400

08001674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800168c:	2301      	movs	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	e001      	b.n	8001696 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	460b      	mov	r3, r1
 80016ac:	807b      	strh	r3, [r7, #2]
 80016ae:	4613      	mov	r3, r2
 80016b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b2:	787b      	ldrb	r3, [r7, #1]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b8:	887a      	ldrh	r2, [r7, #2]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016be:	e003      	b.n	80016c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	041a      	lsls	r2, r3, #16
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	611a      	str	r2, [r3, #16]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016e4:	887a      	ldrh	r2, [r7, #2]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4013      	ands	r3, r2
 80016ea:	041a      	lsls	r2, r3, #16
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	400b      	ands	r3, r1
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	611a      	str	r2, [r3, #16]
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e26c      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 8087 	beq.w	8001832 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001724:	4b92      	ldr	r3, [pc, #584]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b04      	cmp	r3, #4
 800172e:	d00c      	beq.n	800174a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001730:	4b8f      	ldr	r3, [pc, #572]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b08      	cmp	r3, #8
 800173a:	d112      	bne.n	8001762 <HAL_RCC_OscConfig+0x5e>
 800173c:	4b8c      	ldr	r3, [pc, #560]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001748:	d10b      	bne.n	8001762 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174a:	4b89      	ldr	r3, [pc, #548]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d06c      	beq.n	8001830 <HAL_RCC_OscConfig+0x12c>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d168      	bne.n	8001830 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e246      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176a:	d106      	bne.n	800177a <HAL_RCC_OscConfig+0x76>
 800176c:	4b80      	ldr	r3, [pc, #512]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a7f      	ldr	r2, [pc, #508]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e02e      	b.n	80017d8 <HAL_RCC_OscConfig+0xd4>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x98>
 8001782:	4b7b      	ldr	r3, [pc, #492]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a7a      	ldr	r2, [pc, #488]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b78      	ldr	r3, [pc, #480]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a77      	ldr	r2, [pc, #476]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e01d      	b.n	80017d8 <HAL_RCC_OscConfig+0xd4>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0xbc>
 80017a6:	4b72      	ldr	r3, [pc, #456]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a71      	ldr	r2, [pc, #452]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b6f      	ldr	r3, [pc, #444]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a6e      	ldr	r2, [pc, #440]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0xd4>
 80017c0:	4b6b      	ldr	r3, [pc, #428]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a6a      	ldr	r2, [pc, #424]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b68      	ldr	r3, [pc, #416]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a67      	ldr	r2, [pc, #412]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fcb6 	bl	8001150 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fcb2 	bl	8001150 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1fa      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b5d      	ldr	r3, [pc, #372]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0xe4>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff fca2 	bl	8001150 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff fc9e 	bl	8001150 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	; 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e1e6      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001822:	4b53      	ldr	r3, [pc, #332]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x10c>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d063      	beq.n	8001906 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800183e:	4b4c      	ldr	r3, [pc, #304]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00b      	beq.n	8001862 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800184a:	4b49      	ldr	r3, [pc, #292]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b08      	cmp	r3, #8
 8001854:	d11c      	bne.n	8001890 <HAL_RCC_OscConfig+0x18c>
 8001856:	4b46      	ldr	r3, [pc, #280]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d116      	bne.n	8001890 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001862:	4b43      	ldr	r3, [pc, #268]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <HAL_RCC_OscConfig+0x176>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d001      	beq.n	800187a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e1ba      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187a:	4b3d      	ldr	r3, [pc, #244]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4939      	ldr	r1, [pc, #228]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 800188a:	4313      	orrs	r3, r2
 800188c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188e:	e03a      	b.n	8001906 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d020      	beq.n	80018da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001898:	4b36      	ldr	r3, [pc, #216]	; (8001974 <HAL_RCC_OscConfig+0x270>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff fc57 	bl	8001150 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a6:	f7ff fc53 	bl	8001150 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e19b      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b8:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c4:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4927      	ldr	r1, [pc, #156]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]
 80018d8:	e015      	b.n	8001906 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018da:	4b26      	ldr	r3, [pc, #152]	; (8001974 <HAL_RCC_OscConfig+0x270>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fc36 	bl	8001150 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e8:	f7ff fc32 	bl	8001150 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e17a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d03a      	beq.n	8001988 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d019      	beq.n	800194e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_RCC_OscConfig+0x274>)
 800191c:	2201      	movs	r2, #1
 800191e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001920:	f7ff fc16 	bl	8001150 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001928:	f7ff fc12 	bl	8001150 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e15a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <HAL_RCC_OscConfig+0x26c>)
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001946:	2001      	movs	r0, #1
 8001948:	f000 faa6 	bl	8001e98 <RCC_Delay>
 800194c:	e01c      	b.n	8001988 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_RCC_OscConfig+0x274>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001954:	f7ff fbfc 	bl	8001150 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195a:	e00f      	b.n	800197c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195c:	f7ff fbf8 	bl	8001150 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d908      	bls.n	800197c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e140      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	42420000 	.word	0x42420000
 8001978:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197c:	4b9e      	ldr	r3, [pc, #632]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1e9      	bne.n	800195c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80a6 	beq.w	8001ae2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199a:	4b97      	ldr	r3, [pc, #604]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10d      	bne.n	80019c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	4b94      	ldr	r3, [pc, #592]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	4a93      	ldr	r2, [pc, #588]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b0:	61d3      	str	r3, [r2, #28]
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019be:	2301      	movs	r3, #1
 80019c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c2:	4b8e      	ldr	r3, [pc, #568]	; (8001bfc <HAL_RCC_OscConfig+0x4f8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d118      	bne.n	8001a00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ce:	4b8b      	ldr	r3, [pc, #556]	; (8001bfc <HAL_RCC_OscConfig+0x4f8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a8a      	ldr	r2, [pc, #552]	; (8001bfc <HAL_RCC_OscConfig+0x4f8>)
 80019d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019da:	f7ff fbb9 	bl	8001150 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e2:	f7ff fbb5 	bl	8001150 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b64      	cmp	r3, #100	; 0x64
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e0fd      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	4b81      	ldr	r3, [pc, #516]	; (8001bfc <HAL_RCC_OscConfig+0x4f8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d106      	bne.n	8001a16 <HAL_RCC_OscConfig+0x312>
 8001a08:	4b7b      	ldr	r3, [pc, #492]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4a7a      	ldr	r2, [pc, #488]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6213      	str	r3, [r2, #32]
 8001a14:	e02d      	b.n	8001a72 <HAL_RCC_OscConfig+0x36e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x334>
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4a75      	ldr	r2, [pc, #468]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	6213      	str	r3, [r2, #32]
 8001a2a:	4b73      	ldr	r3, [pc, #460]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	4a72      	ldr	r2, [pc, #456]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	f023 0304 	bic.w	r3, r3, #4
 8001a34:	6213      	str	r3, [r2, #32]
 8001a36:	e01c      	b.n	8001a72 <HAL_RCC_OscConfig+0x36e>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	d10c      	bne.n	8001a5a <HAL_RCC_OscConfig+0x356>
 8001a40:	4b6d      	ldr	r3, [pc, #436]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4a6c      	ldr	r2, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	6213      	str	r3, [r2, #32]
 8001a4c:	4b6a      	ldr	r3, [pc, #424]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	4a69      	ldr	r2, [pc, #420]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6213      	str	r3, [r2, #32]
 8001a58:	e00b      	b.n	8001a72 <HAL_RCC_OscConfig+0x36e>
 8001a5a:	4b67      	ldr	r3, [pc, #412]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4a66      	ldr	r2, [pc, #408]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	6213      	str	r3, [r2, #32]
 8001a66:	4b64      	ldr	r3, [pc, #400]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	4a63      	ldr	r2, [pc, #396]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	f023 0304 	bic.w	r3, r3, #4
 8001a70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d015      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fb69 	bl	8001150 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	e00a      	b.n	8001a98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7ff fb65 	bl	8001150 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e0ab      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a98:	4b57      	ldr	r3, [pc, #348]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0ee      	beq.n	8001a82 <HAL_RCC_OscConfig+0x37e>
 8001aa4:	e014      	b.n	8001ad0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fb53 	bl	8001150 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aac:	e00a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aae:	f7ff fb4f 	bl	8001150 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e095      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac4:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1ee      	bne.n	8001aae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ad0:	7dfb      	ldrb	r3, [r7, #23]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d105      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad6:	4b48      	ldr	r3, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a47      	ldr	r2, [pc, #284]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8081 	beq.w	8001bee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aec:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d061      	beq.n	8001bbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d146      	bne.n	8001b8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b00:	4b3f      	ldr	r3, [pc, #252]	; (8001c00 <HAL_RCC_OscConfig+0x4fc>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b06:	f7ff fb23 	bl	8001150 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7ff fb1f 	bl	8001150 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e067      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b20:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b34:	d108      	bne.n	8001b48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b36:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	492d      	ldr	r1, [pc, #180]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b48:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a19      	ldr	r1, [r3, #32]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	4927      	ldr	r1, [pc, #156]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <HAL_RCC_OscConfig+0x4fc>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff faf3 	bl	8001150 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7ff faef 	bl	8001150 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e037      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x46a>
 8001b8c:	e02f      	b.n	8001bee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <HAL_RCC_OscConfig+0x4fc>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fadc 	bl	8001150 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff fad8 	bl	8001150 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e020      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x498>
 8001bba:	e018      	b.n	8001bee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e013      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	42420060 	.word	0x42420060

08001c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0d0      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c18:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d910      	bls.n	8001c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b67      	ldr	r3, [pc, #412]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 0207 	bic.w	r2, r3, #7
 8001c2e:	4965      	ldr	r1, [pc, #404]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b63      	ldr	r3, [pc, #396]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0b8      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c60:	4b59      	ldr	r3, [pc, #356]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4a58      	ldr	r2, [pc, #352]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c78:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4a52      	ldr	r2, [pc, #328]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	494d      	ldr	r1, [pc, #308]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d040      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d115      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e07f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d109      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e073      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e06b      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce2:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f023 0203 	bic.w	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4936      	ldr	r1, [pc, #216]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf4:	f7ff fa2c 	bl	8001150 <HAL_GetTick>
 8001cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7ff fa28 	bl	8001150 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e053      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d12:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 020c 	and.w	r2, r3, #12
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d1eb      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d24:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d210      	bcs.n	8001d54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 0207 	bic.w	r2, r3, #7
 8001d3a:	4922      	ldr	r1, [pc, #136]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e032      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4916      	ldr	r1, [pc, #88]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	490e      	ldr	r1, [pc, #56]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d92:	f000 f821 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	490a      	ldr	r1, [pc, #40]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001da4:	5ccb      	ldrb	r3, [r1, r3]
 8001da6:	fa22 f303 	lsr.w	r3, r2, r3
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1cc>)
 8001dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_RCC_ClockConfig+0x1d0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff f98a 	bl	80010cc <HAL_InitTick>

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	0800271c 	.word	0x0800271c
 8001dd0:	20000010 	.word	0x20000010
 8001dd4:	20000014 	.word	0x20000014

08001dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd8:	b490      	push	{r4, r7}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dde:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001de0:	1d3c      	adds	r4, r7, #4
 8001de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001de8:	f240 2301 	movw	r3, #513	; 0x201
 8001dec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e02:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d002      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x40>
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d003      	beq.n	8001e1e <HAL_RCC_GetSysClockFreq+0x46>
 8001e16:	e02d      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e1a:	623b      	str	r3, [r7, #32]
      break;
 8001e1c:	e02d      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	0c9b      	lsrs	r3, r3, #18
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d013      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	0c5b      	lsrs	r3, r3, #17
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e56:	fb02 f203 	mul.w	r2, r2, r3
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
 8001e62:	e004      	b.n	8001e6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e68:	fb02 f303 	mul.w	r3, r2, r3
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	623b      	str	r3, [r7, #32]
      break;
 8001e72:	e002      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e76:	623b      	str	r3, [r7, #32]
      break;
 8001e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3728      	adds	r7, #40	; 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc90      	pop	{r4, r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	0800270c 	.word	0x0800270c
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	007a1200 	.word	0x007a1200
 8001e94:	003d0900 	.word	0x003d0900

08001e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <RCC_Delay+0x34>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <RCC_Delay+0x38>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0a5b      	lsrs	r3, r3, #9
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001eb4:	bf00      	nop
  }
  while (Delay --);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	60fa      	str	r2, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f9      	bne.n	8001eb4 <RCC_Delay+0x1c>
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000010 	.word	0x20000010
 8001ed0:	10624dd3 	.word	0x10624dd3

08001ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e041      	b.n	8001f6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff f84e 	bl	8000f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	4610      	mov	r0, r2
 8001f14:	f000 fa6a 	bl	80023ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d001      	beq.n	8001f8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e035      	b.n	8001ff8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a16      	ldr	r2, [pc, #88]	; (8002004 <HAL_TIM_Base_Start_IT+0x90>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d009      	beq.n	8001fc2 <HAL_TIM_Base_Start_IT+0x4e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	d004      	beq.n	8001fc2 <HAL_TIM_Base_Start_IT+0x4e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a12      	ldr	r2, [pc, #72]	; (8002008 <HAL_TIM_Base_Start_IT+0x94>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d111      	bne.n	8001fe6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b06      	cmp	r3, #6
 8001fd2:	d010      	beq.n	8001ff6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe4:	e007      	b.n	8001ff6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40012c00 	.word	0x40012c00
 8002008:	40000400 	.word	0x40000400

0800200c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b02      	cmp	r3, #2
 8002020:	d122      	bne.n	8002068 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b02      	cmp	r3, #2
 800202e:	d11b      	bne.n	8002068 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0202 	mvn.w	r2, #2
 8002038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f9b1 	bl	80023b6 <HAL_TIM_IC_CaptureCallback>
 8002054:	e005      	b.n	8002062 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f9a4 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f9b3 	bl	80023c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b04      	cmp	r3, #4
 8002074:	d122      	bne.n	80020bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b04      	cmp	r3, #4
 8002082:	d11b      	bne.n	80020bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0204 	mvn.w	r2, #4
 800208c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2202      	movs	r2, #2
 8002092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f987 	bl	80023b6 <HAL_TIM_IC_CaptureCallback>
 80020a8:	e005      	b.n	80020b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f97a 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f989 	bl	80023c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d122      	bne.n	8002110 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d11b      	bne.n	8002110 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0208 	mvn.w	r2, #8
 80020e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2204      	movs	r2, #4
 80020e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f95d 	bl	80023b6 <HAL_TIM_IC_CaptureCallback>
 80020fc:	e005      	b.n	800210a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f950 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f95f 	bl	80023c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b10      	cmp	r3, #16
 800211c:	d122      	bne.n	8002164 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b10      	cmp	r3, #16
 800212a:	d11b      	bne.n	8002164 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0210 	mvn.w	r2, #16
 8002134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2208      	movs	r2, #8
 800213a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f933 	bl	80023b6 <HAL_TIM_IC_CaptureCallback>
 8002150:	e005      	b.n	800215e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f926 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f935 	bl	80023c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b01      	cmp	r3, #1
 8002170:	d10e      	bne.n	8002190 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b01      	cmp	r3, #1
 800217e:	d107      	bne.n	8002190 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0201 	mvn.w	r2, #1
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe fd8a 	bl	8000ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	2b80      	cmp	r3, #128	; 0x80
 800219c:	d10e      	bne.n	80021bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a8:	2b80      	cmp	r3, #128	; 0x80
 80021aa:	d107      	bne.n	80021bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fa67 	bl	800268a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c6:	2b40      	cmp	r3, #64	; 0x40
 80021c8:	d10e      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d4:	2b40      	cmp	r3, #64	; 0x40
 80021d6:	d107      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f8f9 	bl	80023da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	d10e      	bne.n	8002214 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	2b20      	cmp	r3, #32
 8002202:	d107      	bne.n	8002214 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0220 	mvn.w	r2, #32
 800220c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fa32 	bl	8002678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_TIM_ConfigClockSource+0x18>
 8002230:	2302      	movs	r3, #2
 8002232:	e0b3      	b.n	800239c <HAL_TIM_ConfigClockSource+0x180>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002252:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800225a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226c:	d03e      	beq.n	80022ec <HAL_TIM_ConfigClockSource+0xd0>
 800226e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002272:	f200 8087 	bhi.w	8002384 <HAL_TIM_ConfigClockSource+0x168>
 8002276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227a:	f000 8085 	beq.w	8002388 <HAL_TIM_ConfigClockSource+0x16c>
 800227e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002282:	d87f      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x168>
 8002284:	2b70      	cmp	r3, #112	; 0x70
 8002286:	d01a      	beq.n	80022be <HAL_TIM_ConfigClockSource+0xa2>
 8002288:	2b70      	cmp	r3, #112	; 0x70
 800228a:	d87b      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x168>
 800228c:	2b60      	cmp	r3, #96	; 0x60
 800228e:	d050      	beq.n	8002332 <HAL_TIM_ConfigClockSource+0x116>
 8002290:	2b60      	cmp	r3, #96	; 0x60
 8002292:	d877      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x168>
 8002294:	2b50      	cmp	r3, #80	; 0x50
 8002296:	d03c      	beq.n	8002312 <HAL_TIM_ConfigClockSource+0xf6>
 8002298:	2b50      	cmp	r3, #80	; 0x50
 800229a:	d873      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x168>
 800229c:	2b40      	cmp	r3, #64	; 0x40
 800229e:	d058      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0x136>
 80022a0:	2b40      	cmp	r3, #64	; 0x40
 80022a2:	d86f      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x168>
 80022a4:	2b30      	cmp	r3, #48	; 0x30
 80022a6:	d064      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x156>
 80022a8:	2b30      	cmp	r3, #48	; 0x30
 80022aa:	d86b      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x168>
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d060      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x156>
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d867      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x168>
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d05c      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x156>
 80022b8:	2b10      	cmp	r3, #16
 80022ba:	d05a      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80022bc:	e062      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6899      	ldr	r1, [r3, #8]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f000 f95c 	bl	800258a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	609a      	str	r2, [r3, #8]
      break;
 80022ea:	e04e      	b.n	800238a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6899      	ldr	r1, [r3, #8]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f000 f945 	bl	800258a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800230e:	609a      	str	r2, [r3, #8]
      break;
 8002310:	e03b      	b.n	800238a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6859      	ldr	r1, [r3, #4]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	461a      	mov	r2, r3
 8002320:	f000 f8bc 	bl	800249c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2150      	movs	r1, #80	; 0x50
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f913 	bl	8002556 <TIM_ITRx_SetConfig>
      break;
 8002330:	e02b      	b.n	800238a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6859      	ldr	r1, [r3, #4]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	461a      	mov	r2, r3
 8002340:	f000 f8da 	bl	80024f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2160      	movs	r1, #96	; 0x60
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f903 	bl	8002556 <TIM_ITRx_SetConfig>
      break;
 8002350:	e01b      	b.n	800238a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6859      	ldr	r1, [r3, #4]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	461a      	mov	r2, r3
 8002360:	f000 f89c 	bl	800249c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2140      	movs	r1, #64	; 0x40
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f8f3 	bl	8002556 <TIM_ITRx_SetConfig>
      break;
 8002370:	e00b      	b.n	800238a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4619      	mov	r1, r3
 800237c:	4610      	mov	r0, r2
 800237e:	f000 f8ea 	bl	8002556 <TIM_ITRx_SetConfig>
        break;
 8002382:	e002      	b.n	800238a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002384:	bf00      	nop
 8002386:	e000      	b.n	800238a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002388:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a25      	ldr	r2, [pc, #148]	; (8002494 <TIM_Base_SetConfig+0xa8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d007      	beq.n	8002414 <TIM_Base_SetConfig+0x28>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240a:	d003      	beq.n	8002414 <TIM_Base_SetConfig+0x28>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a22      	ldr	r2, [pc, #136]	; (8002498 <TIM_Base_SetConfig+0xac>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d108      	bne.n	8002426 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800241a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a1a      	ldr	r2, [pc, #104]	; (8002494 <TIM_Base_SetConfig+0xa8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d007      	beq.n	800243e <TIM_Base_SetConfig+0x52>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002434:	d003      	beq.n	800243e <TIM_Base_SetConfig+0x52>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a17      	ldr	r2, [pc, #92]	; (8002498 <TIM_Base_SetConfig+0xac>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d108      	bne.n	8002450 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a07      	ldr	r2, [pc, #28]	; (8002494 <TIM_Base_SetConfig+0xa8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d103      	bne.n	8002484 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	615a      	str	r2, [r3, #20]
}
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	40012c00 	.word	0x40012c00
 8002498:	40000400 	.word	0x40000400

0800249c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	f023 0201 	bic.w	r2, r3, #1
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f023 030a 	bic.w	r3, r3, #10
 80024d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	621a      	str	r2, [r3, #32]
}
 80024ee:	bf00      	nop
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f023 0210 	bic.w	r2, r3, #16
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002522:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	031b      	lsls	r3, r3, #12
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	4313      	orrs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002534:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	621a      	str	r2, [r3, #32]
}
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	f043 0307 	orr.w	r3, r3, #7
 8002578:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	609a      	str	r2, [r3, #8]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800258a:	b480      	push	{r7}
 800258c:	b087      	sub	sp, #28
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	021a      	lsls	r2, r3, #8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	609a      	str	r2, [r3, #8]
}
 80025be:	bf00      	nop
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025dc:	2302      	movs	r3, #2
 80025de:	e041      	b.n	8002664 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a14      	ldr	r2, [pc, #80]	; (8002670 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d009      	beq.n	8002638 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262c:	d004      	beq.n	8002638 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a10      	ldr	r2, [pc, #64]	; (8002674 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d10c      	bne.n	8002652 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800263e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	4313      	orrs	r3, r2
 8002648:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40012c00 	.word	0x40012c00
 8002674:	40000400 	.word	0x40000400

08002678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <__libc_init_array>:
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	2600      	movs	r6, #0
 80026a0:	4d0c      	ldr	r5, [pc, #48]	; (80026d4 <__libc_init_array+0x38>)
 80026a2:	4c0d      	ldr	r4, [pc, #52]	; (80026d8 <__libc_init_array+0x3c>)
 80026a4:	1b64      	subs	r4, r4, r5
 80026a6:	10a4      	asrs	r4, r4, #2
 80026a8:	42a6      	cmp	r6, r4
 80026aa:	d109      	bne.n	80026c0 <__libc_init_array+0x24>
 80026ac:	f000 f822 	bl	80026f4 <_init>
 80026b0:	2600      	movs	r6, #0
 80026b2:	4d0a      	ldr	r5, [pc, #40]	; (80026dc <__libc_init_array+0x40>)
 80026b4:	4c0a      	ldr	r4, [pc, #40]	; (80026e0 <__libc_init_array+0x44>)
 80026b6:	1b64      	subs	r4, r4, r5
 80026b8:	10a4      	asrs	r4, r4, #2
 80026ba:	42a6      	cmp	r6, r4
 80026bc:	d105      	bne.n	80026ca <__libc_init_array+0x2e>
 80026be:	bd70      	pop	{r4, r5, r6, pc}
 80026c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c4:	4798      	blx	r3
 80026c6:	3601      	adds	r6, #1
 80026c8:	e7ee      	b.n	80026a8 <__libc_init_array+0xc>
 80026ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ce:	4798      	blx	r3
 80026d0:	3601      	adds	r6, #1
 80026d2:	e7f2      	b.n	80026ba <__libc_init_array+0x1e>
 80026d4:	0800272c 	.word	0x0800272c
 80026d8:	0800272c 	.word	0x0800272c
 80026dc:	0800272c 	.word	0x0800272c
 80026e0:	08002730 	.word	0x08002730

080026e4 <memset>:
 80026e4:	4603      	mov	r3, r0
 80026e6:	4402      	add	r2, r0
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d100      	bne.n	80026ee <memset+0xa>
 80026ec:	4770      	bx	lr
 80026ee:	f803 1b01 	strb.w	r1, [r3], #1
 80026f2:	e7f9      	b.n	80026e8 <memset+0x4>

080026f4 <_init>:
 80026f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f6:	bf00      	nop
 80026f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fa:	bc08      	pop	{r3}
 80026fc:	469e      	mov	lr, r3
 80026fe:	4770      	bx	lr

08002700 <_fini>:
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002702:	bf00      	nop
 8002704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002706:	bc08      	pop	{r3}
 8002708:	469e      	mov	lr, r3
 800270a:	4770      	bx	lr
