/*
 * button.c
 *
 *  Created on: Nov 3, 2022
 *      Author: PC
 */


#include "button.h"

// we aim to work with more than one buttons
#define NO_OF_BUTTONS 3
// timer interrupt duration is 10ms , so to pass 1 second ,
// we need to jump to the interrupt service routine 100 time
#define DURATION_FOR_AUTO_INCREASING 	100

//define button state
#define BUTTON_IS_PRESSED 				GPIO_PIN_RESET
#define BUTTON_IS_RELEASED 				GPIO_PIN_SET

//define button flags
#define BUTTON_FLAG_SET					1
#define BUTTON_FLAG_CLEAR 				0

//define button function name
#define CONTROL_MODE 					0
#define SET_TIME     					1
#define RETURN       					2

void initButton();
void button_reading(void);
unsigned char isButtonPressed(unsigned char index);
unsigned char isButtonPressed1s(unsigned char index);

int TimeOutForKeyPress = 500;
int TimeOutForKeyHold  = 500;

int buttonFlags[NO_OF_BUTTONS];

// we define 4-stage buffers for debouncing
static GPIO_PinState debounceButtonBuffer1[NO_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer2[NO_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer3[NO_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer4[NO_OF_BUTTONS];
// we define a flag for a button pressed more than 1 second .
static uint8_t flagForButtonPress1s[NO_OF_BUTTONS];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];

//user definition input port and input pin
#define INPUT_PORT GPIOA
uint16_t buttonPin[NO_OF_BUTTONS] = {0x2000, 0x4000, 0x8000};


void initButton(){
	//clear all buffers, counters and flags
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++){
		debounceButtonBuffer1[i] 	= BUTTON_IS_RELEASED;
		debounceButtonBuffer2[i] 	= BUTTON_IS_RELEASED;
		debounceButtonBuffer3[i] 	= BUTTON_IS_RELEASED;
		debounceButtonBuffer4[i] 	= BUTTON_IS_RELEASED;
		buttonFlags[i] 				= BUTTON_FLAG_CLEAR;
		flagForButtonPress1s[i] 	= BUTTON_FLAG_CLEAR;
		counterForButtonPress1s[i] 	= 0;
	}
}

void button_reading (void) {
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++){
		//propagate buffer stage 2 to stage 3
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
		//propagate buffer stage 1 to stage 2
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
		//update the lasted button state in buffer 1
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(INPUT_PORT, buttonPin[i]);
		if((debounceButtonBuffer2[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer3[i])){
			if(debounceButtonBuffer3[i] != debounceButtonBuffer4[i]){
				debounceButtonBuffer4[i] = debounceButtonBuffer3[i];
				if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
					TimeOutForKeyPress = 500;
					buttonFlags[i] = BUTTON_FLAG_SET;
				} else {
					TimeOutForKeyPress--;
					counterForButtonPress1s[i] = 0;
					debounceButtonBuffer4[i] = BUTTON_IS_RELEASED;
				}
			} else {
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
					counterForButtonPress1s[i]++;
				} else flagForButtonPress1s[i] = BUTTON_FLAG_SET;
			}
		}
	}
}

unsigned char isButtonPressed(unsigned char index){
	if(index >= NO_OF_BUTTONS) return 0;
	if(buttonFlags[index] == BUTTON_FLAG_SET){
		//clear button flags and return
		buttonFlags[index] = BUTTON_FLAG_CLEAR;
		return 1;
	} else return 0;
}

unsigned char isButtonPressed1s(unsigned char index){
	if(index >= NO_OF_BUTTONS) return 0;
	if(flagForButtonPress1s[index] == BUTTON_FLAG_SET){
		//clear button hold more than 1s flags and return
		flagForButtonPress1s[index] = BUTTON_FLAG_CLEAR;
		//clear counter
		counterForButtonPress1s[index] = 0;
		return 1;
	} else return 0;
}
